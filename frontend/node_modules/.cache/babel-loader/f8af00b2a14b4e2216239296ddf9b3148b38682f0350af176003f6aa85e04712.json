{"ast":null,"code":"import _slicedToArray from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"../chunk-3W5G4CYI.js\";\nimport React, { useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nvar useCustomElementPortal = function useCustomElementPortal(elements) {\n  var initialState = Array(elements.length).fill(null);\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    nodes = _useState2[0],\n    setNodes = _useState2[1];\n  return elements.map(function (el, index) {\n    return {\n      id: el.id,\n      mount: function mount(node) {\n        return setNodes(function (prevState) {\n          return prevState.map(function (n, i) {\n            return i === index ? node : n;\n          });\n        });\n      },\n      unmount: function unmount() {\n        return setNodes(function (prevState) {\n          return prevState.map(function (n, i) {\n            return i === index ? null : n;\n          });\n        });\n      },\n      portal: function portal() {\n        return /* @__PURE__ */React.createElement(React.Fragment, null, nodes[index] ? createPortal(el.component, nodes[index]) : null);\n      }\n    };\n  });\n};\nexport { useCustomElementPortal };","map":{"version":3,"mappings":";;AAAA,OAAOA,SAASC,gBAAgB;AAChC,SAASC,oBAAoB;AAgBtB,IAAMC,yBAAyB,SAAzBA,uBAA0BC,UAA6C;EAClF,IAAMC,eAAeC,MAAMF,SAASG,MAAM,EAAEC,KAAK,IAAI;EACrD,gBAA0BP,SAA6BI,YAAY;IAAAI;IAA5DC;IAAOC,QAAQ;EAEtB,OAAOP,SAASQ,IAAI,UAACC,IAAIC;IAAA,OAAW;MAClCC,IAAIF,GAAGE;MACPC,OAAO,eAACC;QAAA,OAAkBN,SAAS;UAAA,OAAaO,UAAUN,IAAI,UAACO,GAAGC;YAAA,OAAOA,MAAMN,QAAQG,OAAOE,CAAE;UAAA,EAAC;QAAA;MAAA;MACjGE,SAAS;QAAA,OAAMV,SAAS;UAAA,OAAaO,UAAUN,IAAI,UAACO,GAAGC;YAAA,OAAOA,MAAMN,QAAQ,OAAOK,CAAE;UAAA,EAAC;QAAA;MAAA;MACtFG,QAAQ;QAAA,OAAM,yDAAGZ,MAAMI,KAAK,IAAIZ,aAAaW,GAAGU,WAAWb,MAAMI,KAAK,CAAY,IAAI,IAAK;MAAA;IAC7F;EAAA,CAAE;AACJ","names":["React","useState","createPortal","useCustomElementPortal","elements","initialState","Array","length","fill","_useState2","nodes","setNodes","map","el","index","id","mount","node","prevState","n","i","unmount","portal","component"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\useCustomElementPortal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport type UseCustomElementPortalParams = {\n  component: React.ReactNode;\n  id: number;\n};\n\nexport type UseCustomElementPortalReturn = {\n  portal: () => JSX.Element;\n  mount: (node: Element) => void;\n  unmount: () => void;\n  id: number;\n};\n\n// This function takes a component as prop, and returns functions that mount and unmount\n// the given component into a given node\nexport const useCustomElementPortal = (elements: UseCustomElementPortalParams[]) => {\n  const initialState = Array(elements.length).fill(null);\n  const [nodes, setNodes] = useState<(Element | null)[]>(initialState);\n\n  return elements.map((el, index) => ({\n    id: el.id,\n    mount: (node: Element) => setNodes(prevState => prevState.map((n, i) => (i === index ? node : n))),\n    unmount: () => setNodes(prevState => prevState.map((n, i) => (i === index ? null : n))),\n    portal: () => <>{nodes[index] ? createPortal(el.component, nodes[index] as Element) : null}</>,\n  }));\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}