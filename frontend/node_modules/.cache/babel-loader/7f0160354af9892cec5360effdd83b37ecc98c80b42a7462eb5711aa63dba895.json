{"ast":null,"code":"import { deprecated, deprecatedObjectProperty } from \"../chunk-KJVJ4CFF.mjs\";\nimport { __export, __reExport } from \"../chunk-NDCDZYN6.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return ctx.value;\n  };\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  SWRConfig: () => SWRConfig,\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2, SWRConfig } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = _ref => {\n  let {\n    children,\n    organization,\n    lastOrganizationMember,\n    lastOrganizationInvitation,\n    swrConfig\n  } = _ref;\n  return /* @__PURE__ */React2.createElement(SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization,\n        lastOrganizationMember,\n        lastOrganizationInvitation\n      }\n    }\n  }, children));\n};\nvar OrganizationContext = function () {\n  deprecated(\"OrganizationContext\", \"Use `OrganizationProvider` instead\");\n  return OrganizationProvider(...arguments);\n};\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues) => {\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n  const newObj = {};\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  };\n};\nvar usePagesOrInfinite = (params, fetcher, options, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n  const enabled = options.enabled ?? true;\n  const triggerInfinite = options.infinite ?? false;\n  const keepPreviousData = options.keepPreviousData ?? false;\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  };\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher?.(requestParams);\n  }, {\n    keepPreviousData\n  });\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n    return {\n      ...params,\n      ...cacheKeys,\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    };\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher?.(requestParams);\n  });\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const isError = !!(triggerInfinite ? swrInfiniteError : swrError);\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganization = params => {\n  const {\n    invitationList: invitationListParams,\n    membershipList: membershipListParams,\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams\n  } = params || {};\n  const {\n    organization,\n    lastOrganizationMember,\n    lastOrganizationInvitation\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const shouldFetch = !!(clerk.loaded && session && organization);\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const domains = usePagesOrInfinite({\n    ...domainParams\n  }, organization?.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization?.id\n  });\n  const membershipRequests = usePagesOrInfinite({\n    ...membershipRequestParams\n  }, organization?.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization?.id\n  });\n  const memberships = usePagesOrInfinite({\n    ...membersParams,\n    paginated: true\n  }, organization?.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...invitationsParams\n  }, organization?.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization?.id\n  });\n  const pendingInvitations = !clerk.loaded ? () => [] : () => clerk.organization?.getPendingInvitations(invitationListParams);\n  const currentOrganizationMemberships = !clerk.loaded ? () => [] : () => clerk.organization?.getMemberships(membershipListParams);\n  if (invitationListParams) {\n    deprecated(\"invitationList in useOrganization\", \"Use the `invitations` property and return value instead.\");\n  }\n  const {\n    data: invitationList,\n    isValidating: isInvitationsLoading,\n    mutate: mutateInvitationList\n  } = default2(shouldFetch && invitationListParams ? cacheKey(\"invites\", organization, lastOrganizationInvitation, invitationListParams) : null, pendingInvitations);\n  if (membershipListParams) {\n    deprecated(\"membershipList in useOrganization\", \"Use the `memberships` property and return value instead.\");\n  }\n  const {\n    data: membershipList,\n    isValidating: isMembershipsLoading,\n    mutate: mutateMembershipList\n  } = default2(shouldFetch && membershipListParams ? cacheKey(\"memberships\", organization, lastOrganizationMember, membershipListParams) : null, currentOrganizationMemberships);\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization,\n    membershipList,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    invitationList,\n    unstable__mutate: () => {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains,\n    membershipRequests,\n    memberships,\n    invitations\n  };\n};\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(organizationMembership => organizationMembership.organization.id === activeOrganizationId);\n}\nfunction cacheKey(type, organization, resource, pagination) {\n  return [type, organization.id, resource?.id, resource?.updatedAt, pagination.offset, pagination.limit].filter(Boolean).join(\"-\");\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganizationList = params => {\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite({\n    ...userMembershipsParams,\n    paginated: true\n  }, user?.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...userInvitationsParams\n  }, user?.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user?.id\n  });\n  const suggestions = usePagesOrInfinite({\n    ...userSuggestionsParams\n  }, user?.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user?.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      organizationList: void 0,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  const result = {\n    isLoaded: isClerkLoaded,\n    organizationList: createOrganizationList(user.organizationMemberships),\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n  deprecatedObjectProperty(result, \"organizationList\", \"Use `userMemberships` instead.\");\n  return result;\n};\nfunction createOrganizationList(organizationMemberships) {\n  return organizationMemberships.map(organizationMembership => ({\n    membership: organizationMembership,\n    organization: organizationMembership.organization\n  }));\n}\n\n// src/react/hooks/useOrganizations.tsx\nvar useOrganizations = () => {\n  deprecated(\"useOrganizations\", \"Use useOrganizationList, useOrganization, or useClerk instead.\");\n  const clerk = useClerkInstanceContext();\n  if (!clerk.loaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      getOrganizationMemberships: void 0,\n      getOrganization: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    createOrganization: clerk.createOrganization,\n    getOrganizationMemberships: clerk.getOrganizationMemberships,\n    getOrganization: clerk.getOrganization\n  };\n};\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\nexport { ClerkInstanceContext, ClientContext, OrganizationContext, OrganizationProvider, SessionContext, UserContext, assertContextExists, createContextAndHook, useClerkInstanceContext, useClientContext, useOrganization, useOrganizationContext, useOrganizationList, useOrganizations, useSafeLayoutEffect, useSessionContext, useUserContext };","map":{"version":3,"mappings":";;;;AACA,OAAOA,WAAW;AAEX,SAASC,oBAAoBC,YAAqBC,UAA2D;EAClH,IAAI,CAACD,YAAY;IACf,MAAM,OAAOC,aAAa,WAAW,IAAIC,MAAMD,QAAQ,IAAI,IAAIC,MAAM,GAAGD,SAASE,WAAW,YAAY;EAC1G;AACF;AAYO,IAAMC,uBAAuBA,CAClCD,aACAE,YAC8E;EAC9E,MAAM;IAAEC,cAAcP;EAAoB,IAAIM,WAAW,CAAC;EAC1D,MAAME,MAAMT,MAAMU,cAA6C,MAAS;EACxED,IAAIJ,cAAcA;EAElB,MAAMM,SAASA,MAAM;IACnB,MAAMC,MAAMZ,MAAMa,WAAWJ,GAAG;IAChCD,YAAYI,KAAK,GAAGP,WAAW,YAAY;IAC3C,OAAQO,IAAYE;EACtB;EAEA,MAAMC,yBAAyBA,MAAM;IACnC,MAAMH,MAAMZ,MAAMa,WAAWJ,GAAG;IAChC,OAAOG,MAAMA,IAAIE,QAAQ,CAAC;EAC5B;EAEA,OAAO,CAACL,KAAKE,QAAQI,sBAAsB;AAC7C;;;ACvCA;AAAAC;EAAAC;EAAAC;EAAAC;AAAA;AACAC;AAAA,0BAAc;AACd,SAAoBC,WAAXA,UAAmBJ,iBAAiB;AAC7C,SAAoBI,WAAXA,gBAAiC;;;ACS1C,OAAOrB,YAAW;AAMlB,IAAM,CAACsB,sBAAsBC,uBAAuB,IAAIjB,qBAAkC,sBAAsB;AAChH,IAAM,CAACkB,aAAaC,cAAc,IAAInB,qBAAsD,aAAa;AACzG,IAAM,CAACoB,eAAeC,gBAAgB,IAAIrB,qBAAwD,eAAe;AACjH,IAAM,CAACsB,gBAAgBC,iBAAiB,IAAIvB,qBAC1C,gBACF;AAgBA,IAAM,CAACwB,6BAA6BC,sBAAsB,IAAIzB,qBAI3D,qBAAqB;AAExB,IAAM0B,uBAAuBC,QAWvB;EAAA,IAXwB;IAC5BC;IACAC;IACAC;IACAC;IACAC;EACF;EAME,OACE,oCAACrB;IAAUH,OAAOwB;EAAA,GAChB,oCAACR,4BAA4BS,UAA5B;IACCzB,OAAO;MACLA,OAAO;QACLqB;QACAC;QACAC;MACF;IACF;EAAA,GAECH,QACH,CACF;AAEJ;AAKO,IAAMM,sBAAsB,YAAsD;EACvFC,WAAW,uBAAuB,oCAAoC;EACtE,OAAOT,qBAAqB,YAAO;AACrC;;;AC9EA,SAASU,aAAaC,SAASC,QAAQC,gBAAgB;AAKvD,SAASC,iBAAiBC,MAA+BC,MAAwD;EAC/G,MAAMC,UAAU,IAAIC,IAAIC,OAAOC,KAAKJ,IAAI,CAAC;EACzC,MAAMK,sBAA+C,CAAC;EAEtD,WAAWC,QAAQH,OAAOC,KAAKL,IAAI,GAAG;IACpC,IAAI,CAACE,QAAQM,IAAID,IAAI,GAAG;MACtBD,oBAAoBC,IAAI,IAAIP,KAAKO,IAAI;IACvC;EACF;EAEA,OAAOD;AACT;AAaO,IAAMG,oBAAoBA,CAAmCC,QAA8BC,kBAAqB;EACrH,MAAMC,oBAAoB,OAAOF,WAAW,aAAaA;EAGzD,MAAMG,iBAAiBhB,OACrBe,oBAAoBD,cAAcG,cAAcJ,QAAQI,eAAeH,cAAcG,WACvF;EACA,MAAMC,cAAclB,OAAOe,oBAAoBD,cAAcK,WAAWN,QAAQM,YAAYL,cAAcK,QAAQ;EAElH,MAAMC,SAAkC,CAAC;EACzC,WAAWC,OAAOd,OAAOC,KAAKM,aAAa,GAAG;IAE5CM,OAAOC,GAAG,IAAIN,oBAAoBD,cAAcO,GAAG,IAAIR,SAASQ,GAAG,KAAKP,cAAcO,GAAG;EAC3F;EAEA,OAAO;IACL,GAAGD;IACHH,aAAaD,eAAeM;IAC5BH,UAAUD,YAAYI;EACxB;AACF;AAyCO,IAAMC,qBAAyCA,CAACV,QAAQW,SAAS7D,SAAS8D,cAAc;EAC7F,MAAM,CAACC,eAAeC,gBAAgB,IAAI1B,SAASY,OAAOI,eAAe,CAAC;EAG1E,MAAMD,iBAAiBhB,OAAOa,OAAOI,eAAe,CAAC;EACrD,MAAMC,cAAclB,OAAOa,OAAOM,YAAY,EAAE;EAEhD,MAAMS,UAAUjE,QAAQiE,WAAW;EACnC,MAAMC,kBAAkBlE,QAAQmE,YAAY;EAC5C,MAAMC,mBAAmBpE,QAAQoE,oBAAoB;EAErD,MAAMC,gBAAgB;IACpB,GAAGP;IACH,GAAGZ;IACHI,aAAaS;IACbP,UAAUD,YAAYI;EACxB;EAEA,MAAM;IACJW,MAAMC;IACNC,cAAcC;IACdC,WAAWC;IACXC,OAAOC;IACPC,QAAQC;EACV,IAAIjE,SACF,CAACoD,mBAAmB,CAAC,CAACL,WAAWI,UAAUI,gBAAgB,MAC3DW,kBAAkB;IAEhB,MAAMC,gBAAgB1C,iBAAiByC,gBAAgBlB,SAAS;IAEhE,OAAOD,UAAUoB,aAAa;EAChC,GACA;IAAEb;EAAiB,CACrB;EAEA,MAAM;IACJE,MAAMY;IACNR,WAAWS;IACXX,cAAcY;IACdR,OAAOS;IACPC;IACAC;IACAT,QAAQU;EACV,IAAI1E,SACF2E,aAAa;IACX,IAAI,CAACvB,mBAAmB,CAACD,SAAS;MAChC,OAAO;IACT;IAEA,OAAO;MACL,GAAGf;MACH,GAAGY;MACHR,aAAaD,eAAeM,UAAU8B;MACtCjC,UAAUD,YAAYI;IACxB;EACF,GACAqB,kBAAkB;IAEhB,MAAMC,gBAAgB1C,iBAAiByC,gBAAgBlB,SAAS;IAEhE,OAAOD,UAAUoB,aAAa;EAChC,CACF;EAEA,MAAMS,OAAOtD,QAAQ,MAAM;IACzB,IAAI8B,iBAAiB;MACnB,OAAOoB;IACT;IACA,OAAOvB;EACT,GAAG,CAACG,iBAAiBoB,MAAMvB,aAAa,CAAC;EAEzC,MAAM4B,YAAmCxD,YACvCyD,eAAe;IACb,IAAI1B,iBAAiB;MACnB,KAAKqB,QAAQK,WAAW;MACxB;IACF;IACA,OAAO5B,iBAAiB4B,WAAW;EACrC,GACA,CAACL,OAAO,CACV;EAEA,MAAMjB,OAAOlC,QAAQ,MAAM;IACzB,IAAI8B,iBAAiB;MACnB,OAAOgB,iBAAiBW,IAAIC,KAAKA,GAAGxB,IAAI,EAAEyB,KAAK,KAAK,EAAC;IACvD;IACA,OAAOxB,SAASD,QAAQ,EAAC;EAC3B,GAAG,CAACJ,iBAAiBK,SAASW,eAAe,CAAC;EAE9C,MAAMc,QAAQ5D,QAAQ,MAAM;IAC1B,IAAI8B,iBAAiB;MACnB,OAAOgB,kBAAkBA,iBAAiBe,SAAS,CAAC,GAAGC,eAAe;IACxE;IACA,OAAO3B,SAAS2B,eAAe;EACjC,GAAG,CAAChC,iBAAiBK,SAASW,eAAe,CAAC;EAE9C,MAAMR,YAAYR,kBAAkBiB,uBAAuBR;EAC3D,MAAMwB,aAAajC,kBAAkBkB,0BAA0BX;EAC/D,MAAM2B,UAAU,CAAC,EAAElC,kBAAkBmB,mBAAmBR;EAIxD,MAAMwB,YAAYlE,YAAY,MAAM;IAClCwD,UAAUW,KAAKC,KAAKC,IAAI,GAAGF,IAAI,CAAC,CAAC;EACnC,GAAG,CAACX,SAAS,CAAC;EAEd,MAAMc,gBAAgBtE,YAAY,MAAM;IACtCwD,UAAUW,KAAKC,KAAKC,IAAI,GAAGF,IAAI,CAAC,CAAC;EACnC,GAAG,CAACX,SAAS,CAAC;EAEd,MAAMe,eAAerD,eAAeM,UAAU,KAAKJ,YAAYI;EAE/D,MAAMgD,YAAYJ,KAAKK,MAAMZ,QAAQU,eAAenD,YAAYI,OAAO;EACvE,MAAMkD,cAAcb,QAAQU,cAAcnD,YAAYI,UAAU+B,OAAOnC,YAAYI;EACnF,MAAMmD,mBAAmBpB,OAAO,KAAKnC,YAAYI,UAAU+C,cAAcnD,YAAYI;EAErF,MAAMoD,UAAuB7C,kBACzB3D,SACEiF,kBAAkBjF,OAAO;IACvByG,YAAY;EACd,CAAC,IACHzG,SACEwE,UAAUxE,OAAO;IACfyG,YAAY;EACd,CAAC;EAEP,MAAMA,aAAa9C,kBAAkB,MAAMsB,kBAAkB,IAAI,MAAMT,UAAU;EAEjF,OAAO;IACLT;IACA0B;IACAtB;IACAyB;IACAC;IACAV;IACAiB;IACAhB;IACAU;IACAI;IACAI;IACAC;IAAA;IAEAE;IAAA;IAEAD;EACF;AACF;;;ACjHA,IAAME,6BAA6B;EACjC3C,MAAM;EACN0B,OAAO;EACPtB,WAAW;EACXyB,YAAY;EACZC,SAAS;EACTV,MAAM;EACNiB,WAAW;EACXhB,WAAW;EACXU,WAAW;EACXI,eAAe;EACfI,aAAa;EACbC,iBAAiB;EACjBE,YAAY;EACZD,SAAS;AACX;AAEO,IAAMG,kBAAmChE,UAAU;EACxD,MAAM;IACJiE,gBAAgBC;IAChBC,gBAAgBC;IAChBC,SAASC;IACTC,oBAAoBC;IACpBC,aAAaC;IACbC,aAAaC;EACf,IAAI5E,UAAU,CAAC;EACf,MAAM;IAAEtB;IAAcC;IAAwBC;EAA2B,IAAIN,uBAAuB;EACpG,MAAMuG,UAAUzG,kBAAkB;EAElC,MAAM0G,mBAAmB/E,kBAAkBuE,kBAAkB;IAC3DlE,aAAa;IACbE,UAAU;IACVY,kBAAkB;IAClBD,UAAU;IACV8D,gBAAgB;EAClB,CAAC;EAED,MAAMC,8BAA8BjF,kBAAkByE,8BAA8B;IAClFpE,aAAa;IACbE,UAAU;IACV2E,QAAQ;IACR/D,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMiE,oBAAoBnF,kBAAkB2E,mBAAmB;IAC7DtE,aAAa;IACbE,UAAU;IACV6E,MAAM;IACNjE,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMmE,wBAAwBrF,kBAAkB6E,uBAAuB;IACrExE,aAAa;IACbE,UAAU;IACV2E,QAAQ,CAAC,SAAS;IAClB/D,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMoE,QAAQvH,wBAAwB;EAEtC,MAAMwH,cAAc,CAAC,EAAED,MAAME,UAAUV,WAAWnG;EAElD,MAAM8G,eACJ,OAAOlB,qBAAqB,cACxB,SACA;IACElE,aAAa0E,iBAAiB1E;IAC9BE,UAAUwE,iBAAiBxE;IAC3ByE,gBAAgBD,iBAAiBC;EACnC;EAEN,MAAMU,0BACJ,OAAOjB,iCAAiC,cACpC,SACA;IACEpE,aAAa4E,4BAA4B5E;IACzCE,UAAU0E,4BAA4B1E;IACtC2E,QAAQD,4BAA4BC;EACtC;EAEN,MAAMS,gBACJ,OAAOhB,sBAAsB,cACzB,SACA;IACEtE,aAAa8E,kBAAkB9E;IAC/BE,UAAU4E,kBAAkB5E;IAC5B6E,MAAMD,kBAAkBC;EAC1B;EAEN,MAAMQ,oBACJ,OAAOf,0BAA0B,cAC7B,SACA;IACExE,aAAagF,sBAAsBhF;IACnCE,UAAU8E,sBAAsB9E;IAChC2E,QAAQG,sBAAsBH;EAChC;EAEN,MAAMZ,UAAU3D,mBACd;IACE,GAAG8E;EACL,GACA9G,cAAckH,YACd;IACE1E,kBAAkB4D,iBAAiB5D;IACnCD,UAAU6D,iBAAiB7D;IAC3BF,SAAS,CAAC,CAACyE;EACb,GACA;IACEK,MAAM;IACNC,gBAAgBpH,cAAcqH;EAChC,CACF;EAEA,MAAMxB,qBAAqB7D,mBAIzB;IACE,GAAG+E;EACL,GACA/G,cAAcsH,uBACd;IACE9E,kBAAkB8D,4BAA4B9D;IAC9CD,UAAU+D,4BAA4B/D;IACtCF,SAAS,CAAC,CAAC0E;EACb,GACA;IACEI,MAAM;IACNC,gBAAgBpH,cAAcqH;EAChC,CACF;EAEA,MAAMtB,cAAc/D,mBAClB;IACE,GAAGgF;IACHO,WAAW;EACb,GACAvH,cAAcwH,gBACd;IACEhF,kBAAkBgE,kBAAkBhE;IACpCD,UAAUiE,kBAAkBjE;IAC5BF,SAAS,CAAC,CAAC2E;EACb,GACA;IACEG,MAAM;IACNC,gBAAgBpH,cAAcqH;EAChC,CACF;EAEA,MAAMpB,cAAcjE,mBAClB;IACE,GAAGiF;EACL,GACAjH,cAAcyH,gBACd;IACEjF,kBAAkBkE,sBAAsBlE;IACxCD,UAAUmE,sBAAsBnE;IAChCF,SAAS,CAAC,CAAC4E;EACb,GACA;IACEE,MAAM;IACNC,gBAAgBpH,cAAcqH;EAChC,CACF;EAIA,MAAMK,qBAAqB,CAACf,MAAME,SAC9B,MAAM,EAAC,GACP,MAAMF,MAAM3G,cAAc2H,sBAAsBnC,oBAAoB;EAExE,MAAMoC,iCAAiC,CAACjB,MAAME,SAC1C,MAAM,EAAC,GACP,MAAMF,MAAM3G,cAAcwH,eAAe9B,oBAAoB;EAEjE,IAAIF,sBAAsB;IACxBlF,WAAW,qCAAqC,0DAA0D;EAC5G;EAEA,MAAM;IACJoC,MAAM6C;IACN3C,cAAciF;IACd3E,QAAQ4E;EACV,IAAI5I,SACF0H,eAAepB,uBACXuC,SAAS,WAAW/H,cAAcE,4BAA4BsF,oBAAoB,IAClF,MACJkC,kBACF;EAEA,IAAIhC,sBAAsB;IACxBpF,WAAW,qCAAqC,0DAA0D;EAC5G;EAEA,MAAM;IACJoC,MAAM+C;IACN7C,cAAcoF;IACd9E,QAAQ+E;EACV,IAAI/I,SACF0H,eAAelB,uBACXqC,SAAS,eAAe/H,cAAcC,wBAAwByF,oBAAoB,IAClF,MACJkC,8BACF;EAEA,IAAI5H,iBAAiB,QAAW;IAC9B,OAAO;MACLkI,UAAU;MACVlI,cAAc;MACduF,gBAAgB;MAChBE,gBAAgB;MAChB0C,YAAY;MACZxC,SAASN;MACTQ,oBAAoBR;MACpBU,aAAaV;MACbY,aAAaZ;IACf;EACF;EAEA,IAAIrF,iBAAiB,MAAM;IACzB,OAAO;MACLkI,UAAU;MACVlI,cAAc;MACduF,gBAAgB;MAChBE,gBAAgB;MAChB0C,YAAY;MACZxC,SAAS;MACTE,oBAAoB;MACpBE,aAAa;MACbE,aAAa;IACf;EACF;EAGA,IAAI,CAACU,MAAME,UAAU7G,cAAc;IACjC,OAAO;MACLkI,UAAU;MACVlI;MACAuF,gBAAgB;MAChBE,gBAAgB;MAChB0C,YAAY;MACZxC,SAASN;MACTQ,oBAAoBR;MACpBU,aAAaV;MACbY,aAAaZ;IACf;EACF;EAEA,OAAO;IACL6C,UAAU,CAACF,wBAAwB,CAACH;IACpC7H;IACAyF;IACA0C,YAAYC,iCAAiCjC,QAASkC,KAAKC,yBAAyBtI,aAAaqH,EAAE;IAAA;IACnG9B;IACAgD,kBAAkBA,MAAM;MACtB,KAAKN,qBAAqB;MAC1B,KAAKH,qBAAqB;IAC5B;IACAnC;IACAE;IACAE;IACAE;EACF;AACF;AAEA,SAASmC,iCACPE,yBACAE,sBACA;EACA,OAAOF,wBAAwBG,KAC7BC,0BAA0BA,uBAAuB1I,aAAaqH,OAAOmB,oBACvE;AACF;AAEA,SAAST,SACPZ,MACAnH,cACA2I,UACAC,YACA;EACA,OAAO,CAACzB,MAAMnH,aAAaqH,IAAIsB,UAAUtB,IAAIsB,UAAUE,WAAWD,WAAWE,QAAQF,WAAWG,KAAK,EAClGC,OAAOC,OAAO,EACdC,KAAK,GAAG;AACb;;;ACpXA,IAAM7D,8BAA6B;EACjC3C,MAAM;EACN0B,OAAO;EACPtB,WAAW;EACXyB,YAAY;EACZC,SAAS;EACTV,MAAM;EACNiB,WAAW;EACXhB,WAAW;EACXU,WAAW;EACXI,eAAe;EACfI,aAAa;EACbC,iBAAiB;EACjBE,YAAY;EACZD,SAAS;AACX;AAuCO,IAAMgE,sBAA2C7H,UAAU;EAChE,MAAM;IAAE8H;IAAiBC;IAAiBC;EAAgB,IAAIhI,UAAU,CAAC;EAEzE,MAAMiI,4BAA4BlI,kBAAkB+H,iBAAiB;IACnE1H,aAAa;IACbE,UAAU;IACVY,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMiH,4BAA4BnI,kBAAkBgI,iBAAiB;IACnE3H,aAAa;IACbE,UAAU;IACV2E,QAAQ;IACR/D,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMkH,4BAA4BpI,kBAAkBiI,iBAAiB;IACnE5H,aAAa;IACbE,UAAU;IACV2E,QAAQ;IACR/D,kBAAkB;IAClBD,UAAU;EACZ,CAAC;EAED,MAAMoE,QAAQvH,wBAAwB;EACtC,MAAMiJ,OAAO/I,eAAe;EAE5B,MAAMoK,wBACJ,OAAON,oBAAoB,cACvB,SACA;IACE1H,aAAa6H,0BAA0B7H;IACvCE,UAAU2H,0BAA0B3H;EACtC;EAEN,MAAM+H,wBACJ,OAAON,oBAAoB,cACvB,SACA;IACE3H,aAAa8H,0BAA0B9H;IACvCE,UAAU4H,0BAA0B5H;IACpC2E,QAAQiD,0BAA0BjD;EACpC;EAEN,MAAMqD,wBACJ,OAAON,oBAAoB,cACvB,SACA;IACE5H,aAAa+H,0BAA0B/H;IACvCE,UAAU6H,0BAA0B7H;IACpC2E,QAAQkD,0BAA0BlD;EACpC;EAEN,MAAMsD,gBAAgB,CAAC,EAAElD,MAAME,UAAUwB;EAEzC,MAAMtC,cAAc/D,mBAIlB;IACE,GAAG0H;IACHnC,WAAW;EACb,GACAc,MAAMyB,4BACN;IACEtH,kBAAkB+G,0BAA0B/G;IAC5CD,UAAUgH,0BAA0BhH;IACpCF,SAAS,CAAC,CAACqH;EACb,GACA;IACEvC,MAAM;IACN4C,QAAQ1B,MAAMhB;EAChB,CACF;EAEA,MAAMpB,cAAcjE,mBAIlB;IACE,GAAG2H;EACL,GACAtB,MAAM2B,4BACN;IACExH,kBAAkBgH,0BAA0BhH;IAC5CD,UAAUiH,0BAA0BjH;IACpCF,SAAS,CAAC,CAACsH;EACb,GACA;IACExC,MAAM;IACN4C,QAAQ1B,MAAMhB;EAChB,CACF;EAEA,MAAM4C,cAAcjI,mBAIlB;IACE,GAAG4H;EACL,GACAvB,MAAM6B,4BACN;IACE1H,kBAAkBiH,0BAA0BjH;IAC5CD,UAAUkH,0BAA0BlH;IACpCF,SAAS,CAAC,CAACuH;EACb,GACA;IACEzC,MAAM;IACN4C,QAAQ1B,MAAMhB;EAChB,CACF;EAGA,IAAI,CAACwC,eAAe;IAClB,OAAO;MACL3B,UAAU;MACViC,kBAAkB;MAClBC,oBAAoB;MACpBC,WAAW;MACXjB,iBAAiB/D;MACjBgE,iBAAiBhE;MACjBiE,iBAAiBjE;IACnB;EACF;EAEA,MAAMiF,SAAS;IACbpC,UAAU2B;IACVM,kBAAkBI,uBAAuBlC,KAAKC,uBAAuB;IACrE+B,WAAW1D,MAAM0D;IACjBD,oBAAoBzD,MAAMyD;IAC1BhB,iBAAiBrD;IACjBsD,iBAAiBpD;IACjBqD,iBAAiBW;EACnB;EACAO,yBAAyBF,QAAQ,oBAAoB,gCAAgC;EAErF,OAAOA;AACT;AAEA,SAASC,uBAAuBjC,yBAA2D;EACzF,OAAOA,wBAAwBrE,IAAIyE,2BAA2B;IAC5DP,YAAYO;IACZ1I,cAAc0I,uBAAuB1I;EACvC,EAAE;AACJ;;;AC5LO,IAAMyK,mBAAqCA,MAAM;EACtDnK,WAAW,oBAAoB,gEAAgE;EAC/F,MAAMqG,QAAQvH,wBAAwB;EACtC,IAAI,CAACuH,MAAME,QAAQ;IACjB,OAAO;MACLqB,UAAU;MACVkC,oBAAoB;MACpBN,4BAA4B;MAC5BY,iBAAiB;IACnB;EACF;EAEA,OAAO;IACLxC,UAAU;IACVkC,oBAAoBzD,MAAMyD;IAC1BN,4BAA4BnD,MAAMmD;IAClCY,iBAAiB/D,MAAM+D;EACzB;AACF;;;ACvEA,OAAO7M,YAAW;AAEX,IAAM8M,sBAAsB,OAAOC,WAAW,cAAc/M,OAAMgN,kBAAkBhN,OAAMiN","names":["React","assertContextExists","contextVal","msgOrCtx","Error","displayName","createContextAndHook","options","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","__export","SWRConfig","useSWR","useSWRInfinite","__reExport","default","ClerkInstanceContext","useClerkInstanceContext","UserContext","useUserContext","ClientContext","useClientContext","SessionContext","useSessionContext","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","_ref","children","organization","lastOrganizationMember","lastOrganizationInvitation","swrConfig","Provider","OrganizationContext","deprecated","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","initialPage","pageSizeRef","pageSize","newObj","key","current","usePagesOrInfinite","fetcher","cacheKeys","paginatedPage","setPaginatedPage","enabled","triggerInfinite","infinite","keepPreviousData","pagesCacheKey","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","cacheKeyParams","requestParams","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","fetchPage","numberOrgFn","map","a","flat","count","length","total_count","isFetching","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","invitationList","invitationListParams","membershipList","membershipListParams","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","invitationsSafeValues","clerk","shouldFetch","loaded","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","paginated","getMemberships","getInvitations","pendingInvitations","getPendingInvitations","currentOrganizationMemberships","isInvitationsLoading","mutateInvitationList","cacheKey","isMembershipsLoading","mutateMembershipList","isLoaded","membership","getCurrentOrganizationMembership","user","organizationMemberships","unstable__mutate","activeOrganizationId","find","organizationMembership","resource","pagination","updatedAt","offset","limit","filter","Boolean","join","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","organizationList","createOrganization","setActive","result","createOrganizationList","deprecatedObjectProperty","useOrganizations","getOrganization","useSafeLayoutEffect","window","useLayoutEffect","useEffect"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\createContextAndHook.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\clerk-swr.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\contexts.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePagesOrInfinite.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganization.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizationList.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizations.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSafeLayoutEffect.tsx"],"sourcesContent":["'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\nexport * from 'swr';\nexport { default as useSWR, SWRConfig } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClientResource,\n  LoadedClerk,\n  OrganizationInvitationResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { deprecated } from '../deprecated';\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n\n  /**\n   * @deprecated This property will be dropped in the next major release.\n   * This property is only used in another deprecated part: `invitationList` from useOrganization\n   */\n  lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;\n  /**\n   * @deprecated This property will be dropped in the next major release.\n   * This property is only used in another deprecated part: `membershipList` from useOrganization\n   */\n  lastOrganizationMember: OrganizationMembershipResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n  lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;\n  lastOrganizationMember: OrganizationMembershipResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  lastOrganizationMember,\n  lastOrganizationInvitation,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: {\n            organization,\n            lastOrganizationMember,\n            lastOrganizationInvitation,\n          },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\n/**\n * @deprecated use OrganizationProvider instead\n */\nexport const OrganizationContext = (...args: Parameters<typeof OrganizationProvider>) => {\n  deprecated('OrganizationContext', 'Use `OrganizationProvider` instead');\n  return OrganizationProvider(...args);\n};\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n};\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type { CacheSetter, PaginatedResources, ValueOrSetter } from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\ntype PagesOrInfiniteOptions = {\n  /**\n   * This the starting point for your fetched results. The initial value persists between re-renders\n   */\n  initialPage?: number;\n  /**\n   * Maximum number of items returned per request. The initial value persists between re-renders\n   */\n  pageSize?: number;\n};\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage,\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype DefaultOptions = {\n  /**\n   * Persists the previous pages with new ones in the same array\n   */\n  infinite?: boolean;\n  /**\n   * Return the previous key's data until the new data has been loaded\n   */\n  keepPreviousData?: boolean;\n  /**\n   * Should a request be triggered\n   */\n  enabled?: boolean;\n};\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TOptions extends DefaultOptions = DefaultOptions,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  options: TOptions,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TOptions['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, options, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = options.enabled ?? true;\n  const triggerInfinite = options.infinite ?? false;\n  const keepPreviousData = options.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const isError = !!(triggerInfinite ? swrInfiniteError : swrError);\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  ClerkPaginationParams,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembershipsParams,\n  GetMembersParams,\n  GetPendingInvitationsParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { deprecated } from '../../deprecated';\nimport { useSWR } from '../clerk-swr';\nimport { useClerkInstanceContext, useOrganizationContext, useSessionContext } from '../contexts';\nimport type { PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  /**\n   * @deprecated Use `invitations` instead\n   */\n  invitationList?: GetPendingInvitationsParams;\n  /**\n   * @deprecated Use `memberships` instead\n   */\n  membershipList?: GetMembershipsParams;\n  domains?:\n    | true\n    | (GetDomainsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  membershipRequests?:\n    | true\n    | (GetMembershipRequestParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  memberships?:\n    | true\n    | (GetMembersParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n\n  invitations?:\n    | true\n    | (GetInvitationsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      organization: undefined;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: OrganizationInvitationResource[] | null | undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: OrganizationMembershipResource[] | null | undefined;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    invitationList: invitationListParams,\n    membershipList: membershipListParams,\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n  const { organization, lastOrganizationMember, lastOrganizationInvitation } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  const shouldFetch = !!(clerk.loaded && session && organization);\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    {\n      ...membersParams,\n      paginated: true,\n    } as any,\n    organization?.getMemberships as unknown as any,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  // Some gymnastics to adhere to the rules of hooks\n  // We need to make sure useSWR is called on every render\n  const pendingInvitations = !clerk.loaded\n    ? () => [] as OrganizationInvitationResource[]\n    : () => clerk.organization?.getPendingInvitations(invitationListParams);\n\n  const currentOrganizationMemberships = !clerk.loaded\n    ? () => [] as OrganizationMembershipResource[]\n    : () => clerk.organization?.getMemberships(membershipListParams);\n\n  if (invitationListParams) {\n    deprecated('invitationList in useOrganization', 'Use the `invitations` property and return value instead.');\n  }\n\n  const {\n    data: invitationList,\n    isValidating: isInvitationsLoading,\n    mutate: mutateInvitationList,\n  } = useSWR(\n    shouldFetch && invitationListParams\n      ? cacheKey('invites', organization, lastOrganizationInvitation, invitationListParams)\n      : null,\n    pendingInvitations,\n  );\n\n  if (membershipListParams) {\n    deprecated('membershipList in useOrganization', 'Use the `memberships` property and return value instead.');\n  }\n\n  const {\n    data: membershipList,\n    isValidating: isMembershipsLoading,\n    mutate: mutateMembershipList,\n  } = useSWR(\n    shouldFetch && membershipListParams\n      ? cacheKey('memberships', organization, lastOrganizationMember, membershipListParams)\n      : null,\n    currentOrganizationMemberships,\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization,\n    membershipList,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    invitationList,\n    unstable__mutate: () => {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n\nfunction cacheKey(\n  type: 'memberships' | 'invites',\n  organization: OrganizationResource,\n  resource: OrganizationInvitationResource | OrganizationMembershipResource | null | undefined,\n  pagination: ClerkPaginationParams,\n) {\n  return [type, organization.id, resource?.id, resource?.updatedAt, pagination.offset, pagination.limit]\n    .filter(Boolean)\n    .join('-');\n}\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { deprecatedObjectProperty } from '../../deprecated';\nimport { useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  userMemberships?:\n    | true\n    | (GetUserOrganizationMembershipParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  userInvitations?:\n    | true\n    | (GetUserOrganizationInvitationsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  userSuggestions?:\n    | true\n    | (GetUserOrganizationSuggestionsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n};\n\ntype OrganizationList = ReturnType<typeof createOrganizationList>;\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      /**\n       * @deprecated Use userMemberships instead\n       */\n      organizationList: undefined;\n      createOrganization: undefined;\n      setActive: undefined;\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      /**\n       * @deprecated Use userMemberships instead\n       */\n      organizationList: OrganizationList;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    {\n      ...userMembershipsParams,\n      paginated: true,\n    } as any,\n    user?.getOrganizationMemberships as unknown as any,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      organizationList: undefined,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  const result = {\n    isLoaded: isClerkLoaded,\n    organizationList: createOrganizationList(user.organizationMemberships),\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n  deprecatedObjectProperty(result, 'organizationList', 'Use `userMemberships` instead.');\n\n  return result;\n};\n\nfunction createOrganizationList(organizationMemberships: OrganizationMembershipResource[]) {\n  return organizationMemberships.map(organizationMembership => ({\n    membership: organizationMembership,\n    organization: organizationMembership.organization,\n  }));\n}\n","import type { CreateOrganizationParams, OrganizationMembershipResource, OrganizationResource } from '@clerk/types';\n\nimport { deprecated } from '../../deprecated';\nimport { useClerkInstanceContext } from '../contexts';\n\ntype UseOrganizationsReturn =\n  | {\n      isLoaded: false;\n\n      /**\n       * @deprecated Use `createOrganization` from `useOrganizationList`\n       * Example: `const {createOrganization} = useOrganizationList()`\n       */\n      createOrganization: undefined;\n\n      /**\n       * @deprecated Use `memberships` from `useOrganization`\n       * Example: `const {memberships} = useOrganization()`\n       */\n      getOrganizationMemberships: undefined;\n\n      /**\n       * @deprecated Use `getOrganization` from `useClerk`\n       * Example: `const {getOrganization} = useClerk()`\n       */\n      getOrganization: undefined;\n    }\n  | {\n      isLoaded: true;\n      /**\n       * @deprecated Use `createOrganization` from `useOrganizationList`\n       * Example: `const {createOrganization} = useOrganizationList()`\n       */\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n\n      /**\n       * @deprecated Use `memberships` from `useOrganization`\n       * Example: `const {memberships} = useOrganization()`\n       */\n      getOrganizationMemberships: () => Promise<OrganizationMembershipResource[]>;\n\n      /**\n       * @deprecated Use `getOrganization` from `useClerk`\n       * Example: `const {getOrganization} = useClerk()`\n       */\n      getOrganization: (organizationId: string) => Promise<OrganizationResource | undefined>;\n    };\n\ntype UseOrganizations = () => UseOrganizationsReturn;\n\n/**\n * @deprecated Use useOrganizationList, useOrganization, or useClerk instead\n */\nexport const useOrganizations: UseOrganizations = () => {\n  deprecated('useOrganizations', 'Use useOrganizationList, useOrganization, or useClerk instead.');\n  const clerk = useClerkInstanceContext();\n  if (!clerk.loaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      getOrganizationMemberships: undefined,\n      getOrganization: undefined,\n    };\n  }\n\n  return {\n    isLoaded: true,\n    createOrganization: clerk.createOrganization,\n    getOrganizationMemberships: clerk.getOrganizationMemberships,\n    getOrganization: clerk.getOrganization,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}