{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { parsePublishableKey } from \"@clerk/shared/keys\";\nimport { loadScript } from \"@clerk/shared/loadScript\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"@clerk/shared/proxy\";\nimport { addClerkPrefix } from \"@clerk/shared/url\";\nimport { errorThrower } from \"./errorThrower\";\nimport { isDevOrStagingUrl } from \"./isDevOrStageUrl\";\nimport { versionSelector } from \"./versionSelector\";\nconst FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nconst loadClerkJsScript = opts => {\n  const {\n    frontendApi,\n    publishableKey\n  } = opts;\n  if (!publishableKey && !frontendApi) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\nconst clerkJsScriptUrl = opts => {\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey,\n    frontendApi\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || frontendApi || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || frontendApi || \"\";\n  }\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, \"\")}.` : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\nconst applyClerkJsScriptAttributes = options => script => {\n  const {\n    publishableKey,\n    frontendApi,\n    proxyUrl,\n    domain\n  } = options;\n  if (publishableKey) {\n    script.setAttribute(\"data-clerk-publishable-key\", publishableKey);\n  } else if (frontendApi) {\n    script.setAttribute(\"data-clerk-frontend-api\", frontendApi);\n  }\n  if (proxyUrl) {\n    script.setAttribute(\"data-clerk-proxy-url\", proxyUrl);\n  }\n  if (domain) {\n    script.setAttribute(\"data-clerk-domain\", domain);\n  }\n};\nexport { loadClerkJsScript };","map":{"version":3,"mappings":";AAAA,SAASA,2BAA2B;AACpC,SAASC,kBAAkB;AAC3B,SAASC,iBAAiBC,6BAA6B;AACvD,SAASC,sBAAsB;AAG/B,SAASC,oBAAoB;AAC7B,SAASC,yBAAyB;AAClC,SAASC,uBAAuB;AAEhC,MAAMC,uBAAuB;AAOtB,MAAMC,oBAAqBC,QAAmC;EACnE,MAAM;IAAEC;IAAaC;EAAe,IAAIF;EAExC,IAAI,CAACE,kBAAkB,CAACD,aAAa;IACnCN,aAAaQ,gCAAgC;EAC/C;EAEA,OAAOZ,WAAWa,iBAAiBJ,IAAI,GAAG;IACxCK,OAAO;IACPC,aAAa;IACbC,YAAYC,6BAA6BR,IAAI;EAC/C,CAAC,EAAES,MAAM,MAAM;IACb,MAAM,IAAIC,MAAMZ,oBAAoB;EACtC,CAAC;AACH;AAEA,MAAMM,mBAAoBJ,QAAmC;EAC3D,MAAM;IAAEW;IAAYC;IAAgBC;IAAgBC;IAAUC;IAAQb;IAAgBD;EAAY,IAAID;EAEtG,IAAIW,YAAY;IACd,OAAOA;EACT;EAEA,IAAIK,aAAa;EACjB,IAAI,CAAC,CAACF,YAAYtB,gBAAgBsB,QAAQ,GAAG;IAC3CE,aAAavB,sBAAsBqB,QAAQ,EAAEG,QAAQ,iBAAiB,EAAE;EAC1E,WAAWF,UAAU,CAACnB,kBAAkBN,oBAAoBY,cAAc,GAAGD,eAAeA,eAAe,EAAE,GAAG;IAC9Ge,aAAatB,eAAeqB,MAAM;EACpC,OAAO;IACLC,aAAa1B,oBAAoBY,cAAc,GAAGD,eAAeA,eAAe;EAClF;EAEA,MAAMiB,UAAUN,iBAAiB,GAAGA,eAAeK,QAAQ,QAAQ,EAAE,CAAC,MAAM;EAC5E,MAAME,UAAUtB,gBAAgBgB,cAAc;EAC9C,OAAO,WAAWG,UAAU,wBAAwBG,OAAO,eAAeD,OAAO;AACnF;AAEA,MAAMV,+BAAgCY,WAAuCC,UAA8B;EACzG,MAAM;IAAEnB;IAAgBD;IAAaa;IAAUC;EAAO,IAAIK;EAC1D,IAAIlB,gBAAgB;IAClBmB,OAAOC,aAAa,8BAA8BpB,cAAc;EAClE,WAAWD,aAAa;IACtBoB,OAAOC,aAAa,2BAA2BrB,WAAW;EAC5D;EAEA,IAAIa,UAAU;IACZO,OAAOC,aAAa,wBAAwBR,QAAQ;EACtD;EAEA,IAAIC,QAAQ;IACVM,OAAOC,aAAa,qBAAqBP,MAAM;EACjD;AACF","names":["parsePublishableKey","loadScript","isValidProxyUrl","proxyUrlToAbsoluteURL","addClerkPrefix","errorThrower","isDevOrStagingUrl","versionSelector","FAILED_TO_LOAD_ERROR","loadClerkJsScript","opts","frontendApi","publishableKey","throwMissingPublishableKeyError","clerkJsScriptUrl","async","crossOrigin","beforeLoad","applyClerkJsScriptAttributes","catch","Error","clerkJSUrl","clerkJSVariant","clerkJSVersion","proxyUrl","domain","scriptHost","replace","variant","version","options","script","setAttribute"],"sources":["D:\\split project\\SplitEase\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\loadClerkJsScript.ts"],"sourcesContent":["import { parsePublishableKey } from '@clerk/shared/keys';\nimport { loadScript } from '@clerk/shared/loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from '@clerk/shared/proxy';\nimport { addClerkPrefix } from '@clerk/shared/url';\n\nimport type { IsomorphicClerkOptions } from '../types';\nimport { errorThrower } from './errorThrower';\nimport { isDevOrStagingUrl } from './isDevOrStageUrl';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\ntype LoadClerkJsScriptOptions = Omit<IsomorphicClerkOptions, 'proxyUrl' | 'domain'> & {\n  proxyUrl: string;\n  domain: string;\n};\n\nexport const loadClerkJsScript = (opts: LoadClerkJsScriptOptions) => {\n  const { frontendApi, publishableKey } = opts;\n\n  if (!publishableKey && !frontendApi) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey, frontendApi } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const { publishableKey, frontendApi, proxyUrl, domain } = options;\n  if (publishableKey) {\n    script.setAttribute('data-clerk-publishable-key', publishableKey);\n  } else if (frontendApi) {\n    script.setAttribute('data-clerk-frontend-api', frontendApi);\n  }\n\n  if (proxyUrl) {\n    script.setAttribute('data-clerk-proxy-url', proxyUrl);\n  }\n\n  if (domain) {\n    script.setAttribute('data-clerk-domain', domain);\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}