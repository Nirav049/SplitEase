{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport React from \"react\";\nimport { multipleChildrenInButtonComponent } from \"../errors\";\nconst assertSingleChild = children => name => {\n  try {\n    return React.Children.only(children);\n  } catch (e) {\n    throw new Error(multipleChildrenInButtonComponent(name));\n  }\n};\nconst normalizeWithDefaultValue = (children, defaultText) => {\n  if (!children) {\n    children = defaultText;\n  }\n  if (typeof children === \"string\") {\n    children = /* @__PURE__ */React.createElement(\"button\", null, children);\n  }\n  return children;\n};\nconst safeExecute = cb => function () {\n  if (cb && typeof cb === \"function\") {\n    return cb(...arguments);\n  }\n};\nexport { assertSingleChild, normalizeWithDefaultValue, safeExecute };","map":{"version":3,"mappings":";AAAA,OAAOA,WAAW;AAElB,SAASC,yCAAyC;AAE3C,MAAMC,oBACVC,YACAC,QAAyF;EACxF,IAAI;IACF,OAAOJ,MAAMK,SAASC,KAAKH,QAAQ;EACrC,SAASI,GAAG;IACV,MAAM,IAAIC,MAAMP,kCAAkCG,IAAI,CAAC;EACzD;AACF;AAEK,MAAMK,4BAA4BA,CAACN,UAAuCO,gBAAwB;EACvG,IAAI,CAACP,UAAU;IACbA,WAAWO;EACb;EACA,IAAI,OAAOP,aAAa,UAAU;IAChCA,WAAW,mCAAC,gBAAQA,QAAS;EAC/B;EACA,OAAOA;AACT;AAEO,MAAMQ,cACVC,MACD,YAAkB;EAChB,IAAIA,MAAM,OAAOA,OAAO,YAAY;IAClC,OAAOA,GAAG,YAAO;EACnB;AACF","names":["React","multipleChildrenInButtonComponent","assertSingleChild","children","name","Children","only","e","Error","normalizeWithDefaultValue","defaultText","safeExecute","cb"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\childrenUtils.tsx"],"sourcesContent":["import React from 'react';\n\nimport { multipleChildrenInButtonComponent } from '../errors';\n\nexport const assertSingleChild =\n  (children: React.ReactNode) =>\n  (name: 'SignInButton' | 'SignUpButton' | 'SignOutButton' | 'SignInWithMetamaskButton') => {\n    try {\n      return React.Children.only(children);\n    } catch (e) {\n      throw new Error(multipleChildrenInButtonComponent(name));\n    }\n  };\n\nexport const normalizeWithDefaultValue = (children: React.ReactNode | undefined, defaultText: string) => {\n  if (!children) {\n    children = defaultText;\n  }\n  if (typeof children === 'string') {\n    children = <button>{children}</button>;\n  }\n  return children;\n};\n\nexport const safeExecute =\n  (cb: unknown) =>\n  (...args: any) => {\n    if (cb && typeof cb === 'function') {\n      return cb(...args);\n    }\n  };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}