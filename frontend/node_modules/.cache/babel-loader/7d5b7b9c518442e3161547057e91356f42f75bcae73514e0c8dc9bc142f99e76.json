{"ast":null,"code":"import _objectSpread from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// src/underscore.ts\nvar toSentence = function toSentence(items) {\n  if (items.length == 0) {\n    return \"\";\n  }\n  if (items.length == 1) {\n    return items[0];\n  }\n  var sentence = items.slice(0, -1).join(\", \");\n  sentence += \", or \".concat(items.slice(-1));\n  return sentence;\n};\nvar IP_V4_ADDRESS_REGEX = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\nfunction isIPV4Address(str) {\n  return IP_V4_ADDRESS_REGEX.test(str || \"\");\n}\nfunction titleize(str) {\n  var s = str || \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction snakeToCamel(str) {\n  return str ? str.replace(/([-_][a-z])/g, function (match) {\n    return match.toUpperCase().replace(/-|_/, \"\");\n  }) : \"\";\n}\nfunction camelToSnake(str) {\n  return str ? str.replace(/[A-Z]/g, function (letter) {\n    return \"_\".concat(letter.toLowerCase());\n  }) : \"\";\n}\nvar createDeepObjectTransformer = function createDeepObjectTransformer(transform) {\n  var deepTransform = function deepTransform(obj) {\n    if (!obj) {\n      return obj;\n    }\n    if (Array.isArray(obj)) {\n      return obj.map(function (el) {\n        if (typeof el === \"object\" || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n    var copy = _objectSpread({}, obj);\n    var keys = Object.keys(copy);\n    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n      var oldName = _keys[_i];\n      var newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === \"object\") {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n  return deepTransform;\n};\nvar deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\nvar deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\nexport { toSentence, isIPV4Address, titleize, snakeToCamel, camelToSnake, deepCamelToSnake, deepSnakeToCamel };","map":{"version":3,"mappings":";;AAKO,IAAMA,aAAa,SAAbA,WAAcC,OAA4B;EAErD,IAAIA,MAAMC,UAAU,GAAG;IACrB,OAAO;EACT;EACA,IAAID,MAAMC,UAAU,GAAG;IACrB,OAAOD,MAAM,CAAC;EAChB;EACA,IAAIE,WAAWF,MAAMG,MAAM,GAAG,EAAE,EAAEC,KAAK,IAAI;EAC3CF,2BAAoBF,MAAMG,MAAM,EAAE,CAAC;EACnC,OAAOD;AACT;AAEA,IAAMG,sBACJ;AAEK,SAASC,cAAcC,KAAyC;EACrE,OAAOF,oBAAoBG,KAAKD,OAAO,EAAE;AAC3C;AAEO,SAASE,SAASF,KAAwC;EAC/D,IAAMG,IAAIH,OAAO;EACjB,OAAOG,EAAEC,OAAO,CAAC,EAAEC,YAAY,IAAIF,EAAEP,MAAM,CAAC;AAC9C;AAEO,SAASU,aAAaN,KAAiC;EAC5D,OAAOA,MAAMA,IAAIO,QAAQ,gBAAgB;IAAA,OAASC,MAAMH,YAAY,EAAEE,QAAQ,OAAO,EAAE,CAAC;EAAA,KAAI;AAC9F;AAEO,SAASE,aAAaT,KAAiC;EAC5D,OAAOA,MAAMA,IAAIO,QAAQ,UAAU;IAAA,kBAAcG,OAAOC,YAAY,CAAC;EAAA,CAAE,IAAI;AAC7E;AAEA,IAAMC,8BAA8B,SAA9BA,4BAA+BC,WAAmB;EACtD,IAAMC,gBAAgB,SAAhBA,cAAiBC,KAAkB;IACvC,IAAI,CAACA,KAAK;MACR,OAAOA;IACT;IAEA,IAAIC,MAAMC,QAAQF,GAAG,GAAG;MACtB,OAAOA,IAAIG,IAAI,cAAM;QACnB,IAAI,OAAOC,OAAO,YAAYH,MAAMC,QAAQE,EAAE,GAAG;UAC/C,OAAOL,cAAcK,EAAE;QACzB;QACA,OAAOA;MACT,CAAC;IACH;IAEA,IAAMC,yBAAYL,IAAI;IACtB,IAAMM,OAAOC,OAAOD,KAAKD,IAAI;IAC7B,yBAAsBC,+BAAM;MAA5B,IAAWE;MACT,IAAMC,UAAUX,UAAUU,QAAQE,SAAS,CAAC;MAC5C,IAAID,YAAYD,SAAS;QACvBH,KAAKI,OAAO,IAAIJ,KAAKG,OAAO;QAC5B,OAAOH,KAAKG,OAAO;MACrB;MACA,IAAI,OAAOH,KAAKI,OAAO,MAAM,UAAU;QACrCJ,KAAKI,OAAO,IAAIV,cAAcM,KAAKI,OAAO,CAAC;MAC7C;IACF;IACA,OAAOJ;EACT;EAEA,OAAON;AACT;AAOO,IAAMY,mBAAmBd,4BAA4BH,YAAY;AAOjE,IAAMkB,mBAAmBf,4BAA4BN,YAAY","names":["toSentence","items","length","sentence","slice","join","IP_V4_ADDRESS_REGEX","isIPV4Address","str","test","titleize","s","charAt","toUpperCase","snakeToCamel","replace","match","camelToSnake","letter","toLowerCase","createDeepObjectTransformer","transform","deepTransform","obj","Array","isArray","map","el","copy","keys","Object","oldName","newName","toString","deepCamelToSnake","deepSnakeToCamel"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\underscore.ts"],"sourcesContent":["/**\n * Converts an array of strings to a comma-separated sentence\n * @param items {Array<string>}\n * @returns {string} Returns a string with the items joined by a comma and the last item joined by \", or\"\n */\nexport const toSentence = (items: string[]): string => {\n  // TODO: Once Safari supports it, use Intl.ListFormat\n  if (items.length == 0) {\n    return '';\n  }\n  if (items.length == 1) {\n    return items[0];\n  }\n  let sentence = items.slice(0, -1).join(', ');\n  sentence += `, or ${items.slice(-1)}`;\n  return sentence;\n};\n\nconst IP_V4_ADDRESS_REGEX =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\nexport function isIPV4Address(str: string | undefined | null): boolean {\n  return IP_V4_ADDRESS_REGEX.test(str || '');\n}\n\nexport function titleize(str: string | undefined | null): string {\n  const s = str || '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function snakeToCamel(str: string | undefined): string {\n  return str ? str.replace(/([-_][a-z])/g, match => match.toUpperCase().replace(/-|_/, '')) : '';\n}\n\nexport function camelToSnake(str: string | undefined): string {\n  return str ? str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`) : '';\n}\n\nconst createDeepObjectTransformer = (transform: any) => {\n  const deepTransform = (obj: any): any => {\n    if (!obj) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(el => {\n        if (typeof el === 'object' || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n\n    const copy = { ...obj };\n    const keys = Object.keys(copy);\n    for (const oldName of keys) {\n      const newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === 'object') {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n\n  return deepTransform;\n};\n\n/**\n * Transforms camelCased objects/ arrays to snake_cased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\n\n/**\n * Transforms snake_cased objects/ arrays to camelCased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}