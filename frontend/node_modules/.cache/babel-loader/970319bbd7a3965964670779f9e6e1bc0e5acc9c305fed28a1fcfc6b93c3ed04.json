{"ast":null,"code":"import _objectSpread from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"../chunk-3W5G4CYI.js\";\nimport { deprecated } from \"@clerk/shared/deprecated\";\nimport React from \"react\";\nimport IsomorphicClerk from \"../isomorphicClerk\";\nimport { deriveState } from \"../utils/deriveState\";\nimport { AuthContext } from \"./AuthContext\";\nimport { ClientContext } from \"./ClientContext\";\nimport { IsomorphicClerkContext } from \"./IsomorphicClerkContext\";\nimport { OrganizationProvider } from \"./OrganizationContext\";\nimport { SessionContext } from \"./SessionContext\";\nimport { UserContext } from \"./UserContext\";\nfunction ClerkContextProvider(props) {\n  var isomorphicClerkOptions = props.isomorphicClerkOptions,\n    initialState = props.initialState,\n    children = props.children;\n  var _useLoadedIsomorphicC = useLoadedIsomorphicClerk(isomorphicClerkOptions),\n    clerk = _useLoadedIsomorphicC.isomorphicClerk,\n    clerkLoaded = _useLoadedIsomorphicC.loaded;\n  if (isomorphicClerkOptions.frontendApi) {\n    deprecated(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  var _React$useState = React.useState({\n      client: clerk.client,\n      session: clerk.session,\n      user: clerk.user,\n      organization: clerk.organization,\n      lastOrganizationInvitation: null,\n      lastOrganizationMember: null\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  React.useEffect(function () {\n    return clerk.addListener(function (e) {\n      return setState(_objectSpread({}, e));\n    });\n  }, []);\n  var derivedState = deriveState(clerkLoaded, state, initialState);\n  var clerkCtx = React.useMemo(function () {\n    return {\n      value: clerk\n    };\n  }, [clerkLoaded]);\n  var clientCtx = React.useMemo(function () {\n    return {\n      value: state.client\n    };\n  }, [state.client]);\n  var sessionId = derivedState.sessionId,\n    session = derivedState.session,\n    userId = derivedState.userId,\n    user = derivedState.user,\n    orgId = derivedState.orgId,\n    actor = derivedState.actor,\n    lastOrganizationInvitation = derivedState.lastOrganizationInvitation,\n    lastOrganizationMember = derivedState.lastOrganizationMember,\n    organization = derivedState.organization,\n    orgRole = derivedState.orgRole,\n    orgSlug = derivedState.orgSlug,\n    orgPermissions = derivedState.orgPermissions;\n  var authCtx = React.useMemo(function () {\n    var value = {\n      sessionId: sessionId,\n      userId: userId,\n      actor: actor,\n      orgId: orgId,\n      orgRole: orgRole,\n      orgSlug: orgSlug,\n      orgPermissions: orgPermissions\n    };\n    return {\n      value: value\n    };\n  }, [sessionId, userId, actor, orgId, orgRole, orgSlug]);\n  var userCtx = React.useMemo(function () {\n    return {\n      value: user\n    };\n  }, [userId, user]);\n  var sessionCtx = React.useMemo(function () {\n    return {\n      value: session\n    };\n  }, [sessionId, session]);\n  var organizationCtx = React.useMemo(function () {\n    var value = {\n      organization: organization,\n      lastOrganizationInvitation: lastOrganizationInvitation,\n      lastOrganizationMember: lastOrganizationMember\n    };\n    return {\n      value: value\n    };\n  }, [orgId, organization, lastOrganizationInvitation, lastOrganizationMember]);\n  return (\n    // @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    /* @__PURE__ */\n    React.createElement(IsomorphicClerkContext.Provider, {\n      value: clerkCtx\n    }, /* @__PURE__ */React.createElement(ClientContext.Provider, {\n      value: clientCtx\n    }, /* @__PURE__ */React.createElement(SessionContext.Provider, {\n      value: sessionCtx\n    }, /* @__PURE__ */React.createElement(OrganizationProvider, _objectSpread({}, organizationCtx.value), /* @__PURE__ */React.createElement(AuthContext.Provider, {\n      value: authCtx\n    }, /* @__PURE__ */React.createElement(UserContext.Provider, {\n      value: userCtx\n    }, children))))))\n  );\n}\nvar useLoadedIsomorphicClerk = function useLoadedIsomorphicClerk(options) {\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    loaded = _React$useState4[0],\n    setLoaded = _React$useState4[1];\n  var isomorphicClerk = React.useMemo(function () {\n    return IsomorphicClerk.getOrCreateInstance(options);\n  }, []);\n  React.useEffect(function () {\n    isomorphicClerk.__unstable__updateProps({\n      appearance: options.appearance\n    });\n  }, [options.appearance]);\n  React.useEffect(function () {\n    isomorphicClerk.__unstable__updateProps({\n      options: options\n    });\n  }, [options.localization]);\n  React.useEffect(function () {\n    isomorphicClerk.addOnLoaded(function () {\n      return setLoaded(true);\n    });\n  }, []);\n  React.useEffect(function () {\n    return function () {\n      IsomorphicClerk.clearInstance();\n    };\n  }, []);\n  return {\n    isomorphicClerk: isomorphicClerk,\n    loaded: loaded\n  };\n};\nexport { ClerkContextProvider };","map":{"version":3,"mappings":"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","names":["deprecated","React","IsomorphicClerk","deriveState","AuthContext","ClientContext","IsomorphicClerkContext","OrganizationProvider","SessionContext","UserContext","ClerkContextProvider","props","isomorphicClerkOptions","initialState","children","useLoadedIsomorphicClerk","clerk","isomorphicClerk","clerkLoaded","loaded","frontendApi","useState","client","session","user","organization","lastOrganizationInvitation","lastOrganizationMember","_React$useState2","state","setState","useEffect","addListener","e","derivedState","clerkCtx","useMemo","value","clientCtx","sessionId","userId","orgId","actor","orgRole","orgSlug","orgPermissions","authCtx","userCtx","sessionCtx","organizationCtx","Provider","options","_React$useState4","setLoaded","getOrCreateInstance","__unstable__updateProps","appearance","localization","addOnLoaded","clearInstance"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\contexts\\ClerkContextProvider.tsx"],"sourcesContent":["import { deprecated } from '@clerk/shared/deprecated';\nimport type { ClientResource, InitialState, Resources } from '@clerk/types';\nimport React from 'react';\n\nimport IsomorphicClerk from '../isomorphicClerk';\nimport type { IsomorphicClerkOptions } from '../types';\nimport { deriveState } from '../utils/deriveState';\nimport { AuthContext } from './AuthContext';\nimport { ClientContext } from './ClientContext';\nimport { IsomorphicClerkContext } from './IsomorphicClerkContext';\nimport { OrganizationProvider } from './OrganizationContext';\nimport { SessionContext } from './SessionContext';\nimport { UserContext } from './UserContext';\n\ntype ClerkContextProvider = {\n  isomorphicClerkOptions: IsomorphicClerkOptions;\n  initialState: InitialState | undefined;\n  children: React.ReactNode;\n};\n\nexport type ClerkContextProviderState = Resources;\n\nexport function ClerkContextProvider(props: ClerkContextProvider): JSX.Element | null {\n  const { isomorphicClerkOptions, initialState, children } = props;\n  const { isomorphicClerk: clerk, loaded: clerkLoaded } = useLoadedIsomorphicClerk(isomorphicClerkOptions);\n\n  if (isomorphicClerkOptions.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n\n  const [state, setState] = React.useState<ClerkContextProviderState>({\n    client: clerk.client as ClientResource,\n    session: clerk.session,\n    user: clerk.user,\n    organization: clerk.organization,\n    lastOrganizationInvitation: null,\n    lastOrganizationMember: null,\n  });\n\n  React.useEffect(() => {\n    return clerk.addListener(e => setState({ ...e }));\n  }, []);\n\n  const derivedState = deriveState(clerkLoaded, state, initialState);\n  const clerkCtx = React.useMemo(() => ({ value: clerk }), [clerkLoaded]);\n  const clientCtx = React.useMemo(() => ({ value: state.client }), [state.client]);\n\n  const {\n    sessionId,\n    session,\n    userId,\n    user,\n    orgId,\n    actor,\n    lastOrganizationInvitation,\n    lastOrganizationMember,\n    organization,\n    orgRole,\n    orgSlug,\n    orgPermissions,\n  } = derivedState;\n\n  const authCtx = React.useMemo(() => {\n    const value = { sessionId, userId, actor, orgId, orgRole, orgSlug, orgPermissions };\n    return { value };\n  }, [sessionId, userId, actor, orgId, orgRole, orgSlug]);\n  const userCtx = React.useMemo(() => ({ value: user }), [userId, user]);\n  const sessionCtx = React.useMemo(() => ({ value: session }), [sessionId, session]);\n  const organizationCtx = React.useMemo(() => {\n    const value = {\n      organization: organization,\n      lastOrganizationInvitation: lastOrganizationInvitation,\n      lastOrganizationMember: lastOrganizationMember,\n    };\n    return { value };\n  }, [orgId, organization, lastOrganizationInvitation, lastOrganizationMember]);\n\n  return (\n    // @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    <IsomorphicClerkContext.Provider value={clerkCtx}>\n      <ClientContext.Provider value={clientCtx}>\n        <SessionContext.Provider value={sessionCtx}>\n          <OrganizationProvider {...organizationCtx.value}>\n            <AuthContext.Provider value={authCtx}>\n              <UserContext.Provider value={userCtx}>{children}</UserContext.Provider>\n            </AuthContext.Provider>\n          </OrganizationProvider>\n        </SessionContext.Provider>\n      </ClientContext.Provider>\n    </IsomorphicClerkContext.Provider>\n  );\n}\n\nconst useLoadedIsomorphicClerk = (options: IsomorphicClerkOptions) => {\n  const [loaded, setLoaded] = React.useState(false);\n  const isomorphicClerk = React.useMemo(() => IsomorphicClerk.getOrCreateInstance(options), []);\n\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({ appearance: options.appearance });\n  }, [options.appearance]);\n\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({ options });\n  }, [options.localization]);\n\n  React.useEffect(() => {\n    isomorphicClerk.addOnLoaded(() => setLoaded(true));\n  }, []);\n\n  React.useEffect(() => {\n    return () => {\n      IsomorphicClerk.clearInstance();\n    };\n  }, []);\n\n  return { isomorphicClerk, loaded };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}