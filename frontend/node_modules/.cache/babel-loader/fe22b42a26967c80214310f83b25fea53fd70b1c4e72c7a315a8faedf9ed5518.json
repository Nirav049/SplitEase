{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport React from \"react\";\nimport { useSessionContext } from \"../contexts/SessionContext\";\nimport { hocChildrenNotAFunctionError } from \"../errors\";\nconst withSession = (Component, displayName) => {\n  displayName = displayName || Component.displayName || Component.name || \"Component\";\n  Component.displayName = displayName;\n  const HOC = props => {\n    const session = useSessionContext();\n    if (!session) {\n      return null;\n    }\n    return /* @__PURE__ */React.createElement(Component, {\n      ...props,\n      session\n    });\n  };\n  HOC.displayName = `withSession(${displayName})`;\n  return HOC;\n};\nconst WithSession = _ref => {\n  let {\n    children\n  } = _ref;\n  const session = useSessionContext();\n  if (typeof children !== \"function\") {\n    throw new Error(hocChildrenNotAFunctionError);\n  }\n  if (!session) {\n    return null;\n  }\n  return /* @__PURE__ */React.createElement(React.Fragment, null, children(session));\n};\nexport { WithSession, withSession };","map":{"version":3,"mappings":";AACA,OAAOA,WAAW;AAElB,SAASC,yBAAyB;AAClC,SAASC,oCAAoC;AAEtC,MAAMC,cAAcA,CACzBC,WACAC,gBACG;EACHA,cAAcA,eAAeD,UAAUC,eAAeD,UAAUE,QAAQ;EACxEF,UAAUC,cAAcA;EACxB,MAAME,MAAqCC,SAA8B;IACvE,MAAMC,UAAUR,kBAAkB;IAElC,IAAI,CAACQ,SAAS;MACZ,OAAO;IACT;IAEA,OACE,mCAACL;MACE,GAAII;MACLC;IAAA,CACF;EAEJ;EAEAF,IAAIF,cAAc,eAAeA,WAAW;EAC5C,OAAOE;AACT;AAEO,MAAMG,cAERC,QAAkB;EAAA,IAAjB;IAAEC;EAAS;EACf,MAAMH,UAAUR,kBAAkB;EAElC,IAAI,OAAOW,aAAa,YAAY;IAClC,MAAM,IAAIC,MAAMX,4BAA4B;EAC9C;EAEA,IAAI,CAACO,SAAS;IACZ,OAAO;EACT;EAEA,OAAO,yDAAGG,SAASH,OAAO,CAAE;AAC9B","names":["React","useSessionContext","hocChildrenNotAFunctionError","withSession","Component","displayName","name","HOC","props","session","WithSession","_ref","children","Error"],"sources":["D:\\split project\\SplitEase\\frontend\\node_modules\\@clerk\\clerk-react\\src\\components\\withSession.tsx"],"sourcesContent":["import type { SessionResource } from '@clerk/types';\nimport React from 'react';\n\nimport { useSessionContext } from '../contexts/SessionContext';\nimport { hocChildrenNotAFunctionError } from '../errors';\n\nexport const withSession = <P extends { session: SessionResource }>(\n  Component: React.ComponentType<P>,\n  displayName?: string,\n) => {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n  const HOC: React.FC<Omit<P, 'session'>> = (props: Omit<P, 'session'>) => {\n    const session = useSessionContext();\n\n    if (!session) {\n      return null;\n    }\n\n    return (\n      <Component\n        {...(props as P)}\n        session={session}\n      />\n    );\n  };\n\n  HOC.displayName = `withSession(${displayName})`;\n  return HOC;\n};\n\nexport const WithSession: React.FC<{\n  children: (session: SessionResource) => React.ReactNode;\n}> = ({ children }) => {\n  const session = useSessionContext();\n\n  if (typeof children !== 'function') {\n    throw new Error(hocChildrenNotAFunctionError);\n  }\n\n  if (!session) {\n    return null;\n  }\n\n  return <>{children(session)}</>;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}