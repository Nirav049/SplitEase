{"ast":null,"code":"// src/utils/instance.ts\nfunction isStaging(frontendApi) {\n  return frontendApi.endsWith(\".lclstage.dev\") || frontendApi.endsWith(\".stgstage.dev\") || frontendApi.endsWith(\".clerkstage.dev\") || frontendApi.endsWith(\".accountsstage.dev\");\n}\n\n// src/url.ts\nfunction parseSearchParams() {\n  let queryString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (queryString.startsWith(\"?\")) {\n    queryString = queryString.slice(1);\n  }\n  return new URLSearchParams(queryString);\n}\nfunction stripScheme() {\n  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return (url || \"\").replace(/^.+:\\/\\//, \"\");\n}\nfunction addClerkPrefix(str) {\n  if (!str) {\n    return \"\";\n  }\n  let regex;\n  if (str.match(/^(clerk\\.)+\\w*$/)) {\n    regex = /(clerk\\.)*(?=clerk\\.)/;\n  } else if (str.match(/\\.clerk.accounts/)) {\n    return str;\n  } else {\n    regex = /^(clerk\\.)*/gi;\n  }\n  const stripped = str.replace(regex, \"\");\n  return `clerk.${stripped}`;\n}\nvar getClerkJsMajorVersionOrTag = (frontendApi, pkgVersion) => {\n  if (!pkgVersion && isStaging(frontendApi)) {\n    return \"canary\";\n  }\n  if (!pkgVersion) {\n    return \"latest\";\n  }\n  return pkgVersion.split(\".\")[0] || \"latest\";\n};\nvar getScriptUrl = (frontendApi, _ref) => {\n  let {\n    pkgVersion = \"4.68.2\",\n    clerkJSVersion\n  } = _ref;\n  const noSchemeFrontendApi = frontendApi.replace(/http(s)?:\\/\\//, \"\");\n  const major = getClerkJsMajorVersionOrTag(frontendApi, pkgVersion);\n  return `https://${noSchemeFrontendApi}/npm/@clerk/clerk-js@${clerkJSVersion || major}/dist/clerk.browser.js`;\n};\nexport { isStaging, parseSearchParams, stripScheme, addClerkPrefix, getClerkJsMajorVersionOrTag, getScriptUrl };","map":{"version":3,"mappings":";AAGO,SAASA,UAAUC,aAA8B;EACtD,OACEA,YAAYC,SAAS,eAAe,KACpCD,YAAYC,SAAS,eAAe,KACpCD,YAAYC,SAAS,iBAAiB,KACtCD,YAAYC,SAAS,oBAAoB;AAE7C;;;ACRO,SAASC,oBAAqD;EAAA,IAAnCC,kFAAc;EAC9C,IAAIA,YAAYC,WAAW,GAAG,GAAG;IAC/BD,cAAcA,YAAYE,MAAM,CAAC;EACnC;EACA,OAAO,IAAIC,gBAAgBH,WAAW;AACxC;AAEO,SAASI,cAA8B;EAAA,IAAlBC,0EAAM;EAChC,QAAQA,OAAO,IAAIC,QAAQ,YAAY,EAAE;AAC3C;AAEO,SAASC,eAAeC,KAAyB;EACtD,IAAI,CAACA,KAAK;IACR,OAAO;EACT;EACA,IAAIC;EACJ,IAAID,IAAIE,MAAM,iBAAiB,GAAG;IAChCD,QAAQ;EACV,WAAWD,IAAIE,MAAM,kBAAkB,GAAG;IACxC,OAAOF;EACT,OAAO;IACLC,QAAQ;EACV;EAEA,MAAME,WAAWH,IAAIF,QAAQG,OAAO,EAAE;EACtC,OAAO,SAASE,QAAQ;AAC1B;AAQO,IAAMC,8BAA8BA,CAACf,aAAqBgB,eAAwB;EACvF,IAAI,CAACA,cAAcjB,UAAUC,WAAW,GAAG;IACzC,OAAO;EACT;EAEA,IAAI,CAACgB,YAAY;IACf,OAAO;EACT;EAEA,OAAOA,WAAWC,MAAM,GAAG,EAAE,CAAC,KAAK;AACrC;AAOO,IAAMC,eAAeA,CAC1BlB,sBAEG;EAAA,IADH;IAAEgB,aAAa;IAA0BG;EAAe;EAExD,MAAMC,sBAAsBpB,YAAYS,QAAQ,iBAAiB,EAAE;EACnE,MAAMY,QAAQN,4BAA4Bf,aAAagB,UAAU;EACjE,OAAO,WAAWI,mBAAmB,wBAAwBD,kBAAkBE,KAAK;AACtF","names":["isStaging","frontendApi","endsWith","parseSearchParams","queryString","startsWith","slice","URLSearchParams","stripScheme","url","replace","addClerkPrefix","str","regex","match","stripped","getClerkJsMajorVersionOrTag","pkgVersion","split","getScriptUrl","clerkJSVersion","noSchemeFrontendApi","major"],"sources":["D:\\split project\\SplitEase\\frontend\\node_modules\\@clerk\\shared\\src\\utils\\instance.ts","D:\\split project\\SplitEase\\frontend\\node_modules\\@clerk\\shared\\src\\url.ts"],"sourcesContent":["/**\n * Check if the frontendApi ends with a staging domain\n */\nexport function isStaging(frontendApi: string): boolean {\n  return (\n    frontendApi.endsWith('.lclstage.dev') ||\n    frontendApi.endsWith('.stgstage.dev') ||\n    frontendApi.endsWith('.clerkstage.dev') ||\n    frontendApi.endsWith('.accountsstage.dev')\n  );\n}\n","import { isStaging } from './utils/instance';\n\nexport function parseSearchParams(queryString = ''): URLSearchParams {\n  if (queryString.startsWith('?')) {\n    queryString = queryString.slice(1);\n  }\n  return new URLSearchParams(queryString);\n}\n\nexport function stripScheme(url = ''): string {\n  return (url || '').replace(/^.+:\\/\\//, '');\n}\n\nexport function addClerkPrefix(str: string | undefined) {\n  if (!str) {\n    return '';\n  }\n  let regex;\n  if (str.match(/^(clerk\\.)+\\w*$/)) {\n    regex = /(clerk\\.)*(?=clerk\\.)/;\n  } else if (str.match(/\\.clerk.accounts/)) {\n    return str;\n  } else {\n    regex = /^(clerk\\.)*/gi;\n  }\n\n  const stripped = str.replace(regex, '');\n  return `clerk.${stripped}`;\n}\n\n/**\n *\n * Retrieve the clerk-js major tag using the major version from the pkgVersion\n * param or use the frontendApi to determine if the canary tag should be used.\n * The default tag is `latest`.\n */\nexport const getClerkJsMajorVersionOrTag = (frontendApi: string, pkgVersion?: string) => {\n  if (!pkgVersion && isStaging(frontendApi)) {\n    return 'canary';\n  }\n\n  if (!pkgVersion) {\n    return 'latest';\n  }\n\n  return pkgVersion.split('.')[0] || 'latest';\n};\n\n/**\n *\n * Retrieve the clerk-js script url from the frontendApi and the major tag\n * using the {@link getClerkJsMajorVersionOrTag} or a provided clerkJSVersion tag.\n */\nexport const getScriptUrl = (\n  frontendApi: string,\n  { pkgVersion = CLERK_JS_PACKAGE_VERSION, clerkJSVersion }: { pkgVersion?: string; clerkJSVersion?: string },\n) => {\n  const noSchemeFrontendApi = frontendApi.replace(/http(s)?:\\/\\//, '');\n  const major = getClerkJsMajorVersionOrTag(frontendApi, pkgVersion);\n  return `https://${noSchemeFrontendApi}/npm/@clerk/clerk-js@${clerkJSVersion || major}/dist/clerk.browser.js`;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}