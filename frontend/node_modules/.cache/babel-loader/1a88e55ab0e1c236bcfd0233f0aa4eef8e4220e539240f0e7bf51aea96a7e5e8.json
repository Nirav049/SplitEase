{"ast":null,"code":"import { deprecated } from \"./chunk-KJVJ4CFF.mjs\";\n\n// src/proxy.ts\nfunction isValidProxyUrl(key) {\n  if (!key) {\n    return true;\n  }\n  return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\nfunction isHttpOrHttps(key) {\n  return /^http(s)?:\\/\\//.test(key || \"\");\n}\nfunction isProxyUrlRelative(key) {\n  return key.startsWith(\"/\");\n}\nfunction proxyUrlToAbsoluteURL(url) {\n  if (!url) {\n    return \"\";\n  }\n  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\nfunction getRequestUrl(_ref) {\n  var _ref2, _ref3, _headers$get, _split$, _ref4, _headers$get2;\n  var request = _ref.request,\n    relativePath = _ref.relativePath;\n  deprecated(\"getRequestUrl\", \"Use `buildRequestUrl` from @clerk/backend instead.\");\n  var headers = request.headers,\n    initialUrl = request.url;\n  var url = new URL(initialUrl);\n  var host = (_ref2 = (_ref3 = (_headers$get = headers.get(\"X-Forwarded-Host\")) !== null && _headers$get !== void 0 ? _headers$get : headers.get(\"host\")) !== null && _ref3 !== void 0 ? _ref3 : headers[\"host\"]) !== null && _ref2 !== void 0 ? _ref2 : url.host;\n  var protocol = (_split$ = (_ref4 = (_headers$get2 = headers.get(\"X-Forwarded-Proto\")) !== null && _headers$get2 !== void 0 ? _headers$get2 : headers[\"X-Forwarded-Proto\"]) === null || _ref4 === void 0 ? void 0 : _ref4.split(\",\")[0]) !== null && _split$ !== void 0 ? _split$ : url.protocol;\n  protocol = protocol.replace(/[:/]/, \"\");\n  return new URL(relativePath || url.pathname, \"\".concat(protocol, \"://\").concat(host));\n}\nexport { isValidProxyUrl, isHttpOrHttps, isProxyUrlRelative, proxyUrlToAbsoluteURL, getRequestUrl };","map":{"version":3,"mappings":";;;AAEO,SAASA,gBAAgBC,KAAyB;EACvD,IAAI,CAACA,KAAK;IACR,OAAO;EACT;EAEA,OAAOC,cAAcD,GAAG,KAAKE,mBAAmBF,GAAG;AACrD;AAEO,SAASC,cAAcD,KAAyB;EACrD,OAAO,iBAAiBG,KAAKH,OAAO,EAAE;AACxC;AAEO,SAASE,mBAAmBF,KAAa;EAC9C,OAAOA,IAAII,WAAW,GAAG;AAC3B;AAEO,SAASC,sBAAsBC,KAAiC;EACrE,IAAI,CAACA,KAAK;IACR,OAAO;EACT;EACA,OAAOJ,mBAAmBI,GAAG,IAAI,IAAIC,IAAID,KAAKE,OAAOC,SAASC,MAAM,EAAEC,SAAS,IAAIL;AACrF;AAKO,SAASM,oBAA2F;EAAA;EAAA,IAA3EC;IAASC;EACvCC,WAAW,iBAAiB,oDAAoD;EAChF,IAAQC,UAA6BH,QAA7BG;IAAcC,aAAeJ,QAApBP;EACjB,IAAMA,MAAM,IAAIC,IAAIU,UAAU;EAC9B,IAAMC,yCAAOF,QAAQG,IAAI,kBAAkB,wDAAKH,QAAQG,IAAI,MAAM,0CAAMH,QAAgB,MAAM,0CAAKV,IAAIY;EAGvG,IAAIE,gDACDJ,QAAQG,IAAI,mBAAmB,0DAAMH,QAAgB,mBAAmB,2CADvEK,MAC2EC,MAAM,GAAG,EAAE,CAAC,8CAAKhB,IAAIc;EACpGA,WAAWA,SAASG,QAAQ,QAAQ,EAAE;EAEtC,OAAO,IAAIhB,IAAIO,gBAAgBR,IAAIkB,oBAAaJ,QAAQ,gBAAMF,IAAI,CAAE;AACtE","names":["isValidProxyUrl","key","isHttpOrHttps","isProxyUrlRelative","test","startsWith","proxyUrlToAbsoluteURL","url","URL","window","location","origin","toString","getRequestUrl","request","relativePath","deprecated","headers","initialUrl","host","get","protocol","_ref4","split","replace","pathname"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\proxy.ts"],"sourcesContent":["import { deprecated } from './deprecated';\n\nexport function isValidProxyUrl(key: string | undefined) {\n  if (!key) {\n    return true;\n  }\n\n  return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\n\nexport function isHttpOrHttps(key: string | undefined) {\n  return /^http(s)?:\\/\\//.test(key || '');\n}\n\nexport function isProxyUrlRelative(key: string) {\n  return key.startsWith('/');\n}\n\nexport function proxyUrlToAbsoluteURL(url: string | undefined): string {\n  if (!url) {\n    return '';\n  }\n  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\n\n/**\n * @deprecated Use `buildRequestUrl` from @clerk/backend\n */\nexport function getRequestUrl({ request, relativePath }: { request: Request; relativePath?: string }): URL {\n  deprecated('getRequestUrl', 'Use `buildRequestUrl` from @clerk/backend instead.');\n  const { headers, url: initialUrl } = request;\n  const url = new URL(initialUrl);\n  const host = headers.get('X-Forwarded-Host') ?? headers.get('host') ?? (headers as any)['host'] ?? url.host;\n\n  // X-Forwarded-Proto could be 'https, http'\n  let protocol =\n    (headers.get('X-Forwarded-Proto') ?? (headers as any)['X-Forwarded-Proto'])?.split(',')[0] ?? url.protocol;\n  protocol = protocol.replace(/[:/]/, '');\n\n  return new URL(relativePath || url.pathname, `${protocol}://${host}`);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}