{"ast":null,"code":"// src/devBrowser.ts\nvar DEV_BROWSER_SSO_JWT_PARAMETER = \"__dev_session\";\nvar DEV_BROWSER_JWT_MARKER = \"__clerk_db_jwt\";\nvar DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\nfunction setDevBrowserJWTInURL(url, jwt, asQueryParam) {\n  var resultURL = new URL(url);\n  var jwtFromHash = extractDevBrowserJWTFromURLHash(resultURL);\n  var jwtFromSearch = extractDevBrowserJWTFromURLSearchParams(resultURL);\n  var jwtToSet = jwtFromHash || jwtFromSearch || jwt;\n  if (jwtToSet) {\n    if (asQueryParam) {\n      resultURL.searchParams.append(DEV_BROWSER_SSO_JWT_PARAMETER, jwtToSet);\n      resultURL.searchParams.append(DEV_BROWSER_JWT_MARKER, jwtToSet);\n    } else {\n      resultURL.hash = resultURL.hash + \"\".concat(DEV_BROWSER_JWT_MARKER, \"[\").concat(jwtToSet, \"]\");\n    }\n  }\n  return resultURL;\n}\nfunction extractDevBrowserJWTFromHash(hash) {\n  var matches = hash.match(DEV_BROWSER_JWT_MARKER_REGEXP);\n  return matches ? matches[1] : \"\";\n}\nfunction extractDevBrowserJWTFromURLHash(url) {\n  var jwt = extractDevBrowserJWTFromHash(url.hash);\n  url.hash = url.hash.replace(DEV_BROWSER_JWT_MARKER_REGEXP, \"\");\n  if (url.href.endsWith(\"#\")) {\n    url.hash = \"\";\n  }\n  return jwt;\n}\nfunction extractDevBrowserJWTFromURLSearchParams(url) {\n  var jwtFromDevSession = url.searchParams.get(DEV_BROWSER_SSO_JWT_PARAMETER);\n  url.searchParams.delete(DEV_BROWSER_SSO_JWT_PARAMETER);\n  var jwtFromClerkDbJwt = url.searchParams.get(DEV_BROWSER_JWT_MARKER);\n  url.searchParams.delete(DEV_BROWSER_JWT_MARKER);\n  return jwtFromDevSession || jwtFromClerkDbJwt || \"\";\n}\nexport { DEV_BROWSER_SSO_JWT_PARAMETER, DEV_BROWSER_JWT_MARKER, setDevBrowserJWTInURL, extractDevBrowserJWTFromURLHash, extractDevBrowserJWTFromURLSearchParams };","map":{"version":3,"mappings":";AAAO,IAAMA,gCAAgC;AACtC,IAAMC,yBAAyB;AACtC,IAAMC,gCAAgC;AAG/B,SAASC,sBAAsBC,KAAUC,KAAaC,cAA4B;EACvF,IAAMC,YAAY,IAAIC,IAAIJ,GAAG;EAE7B,IAAMK,cAAcC,gCAAgCH,SAAS;EAC7D,IAAMI,gBAAgBC,wCAAwCL,SAAS;EAEvE,IAAMM,WAAWJ,eAAeE,iBAAiBN;EAEjD,IAAIQ,UAAU;IACZ,IAAIP,cAAc;MAEhBC,UAAUO,aAAaC,OAAOf,+BAA+Ba,QAAQ;MACrEN,UAAUO,aAAaC,OAAOd,wBAAwBY,QAAQ;IAChE,OAAO;MACLN,UAAUS,OAAOT,UAAUS,iBAAUf,sBAAsB,cAAIY,QAAQ;IACzE;EACF;EAEA,OAAON;AACT;AAEA,SAASU,6BAA6BD,MAAsB;EAC1D,IAAME,UAAUF,KAAKG,MAAMjB,6BAA6B;EACxD,OAAOgB,UAAUA,QAAQ,CAAC,IAAI;AAChC;AAMO,SAASR,gCAAgCN,KAAU;EACxD,IAAMC,MAAMY,6BAA6Bb,IAAIY,IAAI;EACjDZ,IAAIY,OAAOZ,IAAIY,KAAKI,QAAQlB,+BAA+B,EAAE;EAC7D,IAAIE,IAAIiB,KAAKC,SAAS,GAAG,GAAG;IAC1BlB,IAAIY,OAAO;EACb;EAEA,OAAOX;AACT;AAMO,SAASO,wCAAwCR,KAAU;EAChE,IAAMmB,oBAAoBnB,IAAIU,aAAaU,IAAIxB,6BAA6B;EAC5EI,IAAIU,aAAaW,OAAOzB,6BAA6B;EAErD,IAAM0B,oBAAoBtB,IAAIU,aAAaU,IAAIvB,sBAAsB;EACrEG,IAAIU,aAAaW,OAAOxB,sBAAsB;EAE9C,OAAOsB,qBAAqBG,qBAAqB;AACnD","names":["DEV_BROWSER_SSO_JWT_PARAMETER","DEV_BROWSER_JWT_MARKER","DEV_BROWSER_JWT_MARKER_REGEXP","setDevBrowserJWTInURL","url","jwt","asQueryParam","resultURL","URL","jwtFromHash","extractDevBrowserJWTFromURLHash","jwtFromSearch","extractDevBrowserJWTFromURLSearchParams","jwtToSet","searchParams","append","hash","extractDevBrowserJWTFromHash","matches","match","replace","href","endsWith","jwtFromDevSession","get","delete","jwtFromClerkDbJwt"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\devBrowser.ts"],"sourcesContent":["export const DEV_BROWSER_SSO_JWT_PARAMETER = '__dev_session';\nexport const DEV_BROWSER_JWT_MARKER = '__clerk_db_jwt';\nconst DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n\n// Sets the dev_browser JWT in the hash or the search\nexport function setDevBrowserJWTInURL(url: URL, jwt: string, asQueryParam: boolean): URL {\n  const resultURL = new URL(url);\n\n  const jwtFromHash = extractDevBrowserJWTFromURLHash(resultURL);\n  const jwtFromSearch = extractDevBrowserJWTFromURLSearchParams(resultURL);\n  // Existing jwt takes precedence\n  const jwtToSet = jwtFromHash || jwtFromSearch || jwt;\n\n  if (jwtToSet) {\n    if (asQueryParam) {\n      // Temporarily add the dev browser jwt to both the `__clerk_db_jwt` and `__dev_session`\n      resultURL.searchParams.append(DEV_BROWSER_SSO_JWT_PARAMETER, jwtToSet);\n      resultURL.searchParams.append(DEV_BROWSER_JWT_MARKER, jwtToSet);\n    } else {\n      resultURL.hash = resultURL.hash + `${DEV_BROWSER_JWT_MARKER}[${jwtToSet}]`;\n    }\n  }\n\n  return resultURL;\n}\n\nfunction extractDevBrowserJWTFromHash(hash: string): string {\n  const matches = hash.match(DEV_BROWSER_JWT_MARKER_REGEXP);\n  return matches ? matches[1] : '';\n}\n\n/**\n * Extract & strip existing jwt from hash\n * Side effect: Removes dev browser from the url hash\n **/\nexport function extractDevBrowserJWTFromURLHash(url: URL) {\n  const jwt = extractDevBrowserJWTFromHash(url.hash);\n  url.hash = url.hash.replace(DEV_BROWSER_JWT_MARKER_REGEXP, '');\n  if (url.href.endsWith('#')) {\n    url.hash = '';\n  }\n\n  return jwt;\n}\n\n/**\n * Extract & strip existing jwt from search params\n * Side effect: Removes dev browser from the search params\n **/\nexport function extractDevBrowserJWTFromURLSearchParams(url: URL) {\n  const jwtFromDevSession = url.searchParams.get(DEV_BROWSER_SSO_JWT_PARAMETER);\n  url.searchParams.delete(DEV_BROWSER_SSO_JWT_PARAMETER);\n\n  const jwtFromClerkDbJwt = url.searchParams.get(DEV_BROWSER_JWT_MARKER);\n  url.searchParams.delete(DEV_BROWSER_JWT_MARKER);\n\n  return jwtFromDevSession || jwtFromClerkDbJwt || '';\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}