{"ast":null,"code":"import _classCallCheck from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// src/localStorageBroadcastChannel.ts\nvar KEY_PREFIX = \"__lsbc__\";\nvar LocalStorageBroadcastChannel = /*#__PURE__*/function () {\n  function LocalStorageBroadcastChannel(name) {\n    var _this = this;\n    _classCallCheck(this, LocalStorageBroadcastChannel);\n    this.eventTarget = window;\n    this.postMessage = function (data) {\n      if (typeof window === \"undefined\") {\n        return;\n      }\n      try {\n        window.localStorage.setItem(_this.channelKey, JSON.stringify(data));\n        window.localStorage.removeItem(_this.channelKey);\n      } catch (e) {}\n    };\n    this.addEventListener = function (eventName, listener) {\n      _this.eventTarget.addEventListener(_this.prefixEventName(eventName), function (e) {\n        listener(e);\n      });\n    };\n    this.setupLocalStorageListener = function () {\n      var notifyListeners = function notifyListeners(e) {\n        if (e.key !== _this.channelKey || !e.newValue) {\n          return;\n        }\n        try {\n          var data = JSON.parse(e.newValue || \"\");\n          var event = new MessageEvent(_this.prefixEventName(\"message\"), {\n            data: data\n          });\n          _this.eventTarget.dispatchEvent(event);\n        } catch (e2) {}\n      };\n      window.addEventListener(\"storage\", notifyListeners);\n    };\n    this.channelKey = KEY_PREFIX + name;\n    this.setupLocalStorageListener();\n  }\n  _createClass(LocalStorageBroadcastChannel, [{\n    key: \"prefixEventName\",\n    value: function prefixEventName(eventName) {\n      return this.channelKey + eventName;\n    }\n  }]);\n  return LocalStorageBroadcastChannel;\n}();\nexport { LocalStorageBroadcastChannel };","map":{"version":3,"mappings":";;;AAEA,IAAMA,aAAa;AAEZ,IAAMC;EAIX,sCAAYC,MAAc;IAAA;IAAAC;IAH1B,KAAiBC,cAAcC;IAQ/B,KAAOC,cAAc,UAACC,MAAkB;MACtC,IAAI,OAAOF,WAAW,aAAa;QAEjC;MACF;MAEA,IAAI;QACFA,OAAOG,aAAaC,QAAQC,MAAKC,YAAYC,KAAKC,UAAUN,IAAI,CAAC;QACjEF,OAAOG,aAAaM,WAAWJ,MAAKC,UAAU;MAChD,SAASI,GAAG,CAEZ;IACF;IAEA,KAAOC,mBAAmB,UAACC,WAAsBC,UAAgC;MAC/ER,MAAKN,YAAYY,iBAAiBN,MAAKS,gBAAgBF,SAAS,GAAG,aAAK;QACtEC,SAASH,CAAiB;MAC5B,CAAC;IACH;IAEA,KAAQK,4BAA4B,YAAM;MACxC,IAAMC,kBAAkB,SAAlBA,gBAAmBN,GAAoB;QAC3C,IAAIA,EAAEO,QAAQZ,MAAKC,cAAc,CAACI,EAAEQ,UAAU;UAC5C;QACF;QAEA,IAAI;UACF,IAAMhB,OAAOK,KAAKY,MAAMT,EAAEQ,YAAY,EAAE;UACxC,IAAME,QAAQ,IAAIC,aAAahB,MAAKS,gBAAgB,SAAS,GAAG;YAC9DZ;UACF,CAAC;UACDG,MAAKN,YAAYuB,cAAcF,KAAK;QACtC,SAASV,IAAG,CAEZ;MACF;MAEAV,OAAOW,iBAAiB,WAAWK,eAAe;IACpD;IA1CE,KAAKV,aAAaX,aAAaE;IAC/B,KAAKkB,0BAA0B;EACjC;EAAAQ;IAAAN;IAAAO,OA0CQ,yBAAgBZ,WAA2B;MACjD,OAAO,KAAKN,aAAaM;IAC3B;EAAA;EAAA;AAAA,GACF","names":["KEY_PREFIX","LocalStorageBroadcastChannel","name","_classCallCheck","eventTarget","window","postMessage","data","localStorage","setItem","_this","channelKey","JSON","stringify","removeItem","e","addEventListener","eventName","listener","prefixEventName","setupLocalStorageListener","notifyListeners","key","newValue","parse","event","MessageEvent","dispatchEvent","_createClass","value"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\localStorageBroadcastChannel.ts"],"sourcesContent":["type Listener<T> = (e: MessageEvent<T>) => void;\n\nconst KEY_PREFIX = '__lsbc__';\n\nexport class LocalStorageBroadcastChannel<E> {\n  private readonly eventTarget = window;\n  private readonly channelKey: string;\n\n  constructor(name: string) {\n    this.channelKey = KEY_PREFIX + name;\n    this.setupLocalStorageListener();\n  }\n\n  public postMessage = (data: E): void => {\n    if (typeof window === 'undefined') {\n      // Silently do nothing\n      return;\n    }\n\n    try {\n      window.localStorage.setItem(this.channelKey, JSON.stringify(data));\n      window.localStorage.removeItem(this.channelKey);\n    } catch (e) {\n      // Silently do nothing\n    }\n  };\n\n  public addEventListener = (eventName: 'message', listener: Listener<E>): void => {\n    this.eventTarget.addEventListener(this.prefixEventName(eventName), e => {\n      listener(e as MessageEvent);\n    });\n  };\n\n  private setupLocalStorageListener = () => {\n    const notifyListeners = (e: StorageEvent) => {\n      if (e.key !== this.channelKey || !e.newValue) {\n        return;\n      }\n\n      try {\n        const data = JSON.parse(e.newValue || '');\n        const event = new MessageEvent(this.prefixEventName('message'), {\n          data,\n        });\n        this.eventTarget.dispatchEvent(event);\n      } catch (e) {\n        //\n      }\n    };\n\n    window.addEventListener('storage', notifyListeners);\n  };\n\n  private prefixEventName(eventName: string): string {\n    return this.channelKey + eventName;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}