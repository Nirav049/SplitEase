{"ast":null,"code":"import _objectSpread from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { deprecated, deprecatedObjectProperty } from \"../chunk-KJVJ4CFF.mjs\";\nimport { __export, __reExport } from \"../chunk-NDCDZYN6.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(\"\".concat(msgOrCtx.displayName, \" not found\"));\n  }\n}\nvar createContextAndHook = function createContextAndHook(displayName, options) {\n  var _ref = options || {},\n    _ref$assertCtxFn = _ref.assertCtxFn,\n    assertCtxFn = _ref$assertCtxFn === void 0 ? assertContextExists : _ref$assertCtxFn;\n  var Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  var useCtx = function useCtx() {\n    var ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, \"\".concat(displayName, \" not found\"));\n    return ctx.value;\n  };\n  var useCtxWithoutGuarantee = function useCtxWithoutGuarantee() {\n    var ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  SWRConfig: function SWRConfig() {\n    return _SWRConfig;\n  },\n  useSWR: function useSWR() {\n    return default2;\n  },\n  useSWRInfinite: function useSWRInfinite() {\n    return default3;\n  }\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2, SWRConfig as _SWRConfig } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\nvar _createContextAndHook = createContextAndHook(\"ClerkInstanceContext\"),\n  _createContextAndHook2 = _slicedToArray(_createContextAndHook, 2),\n  ClerkInstanceContext = _createContextAndHook2[0],\n  useClerkInstanceContext = _createContextAndHook2[1];\nvar _createContextAndHook3 = createContextAndHook(\"UserContext\"),\n  _createContextAndHook4 = _slicedToArray(_createContextAndHook3, 2),\n  UserContext = _createContextAndHook4[0],\n  useUserContext = _createContextAndHook4[1];\nvar _createContextAndHook5 = createContextAndHook(\"ClientContext\"),\n  _createContextAndHook6 = _slicedToArray(_createContextAndHook5, 2),\n  ClientContext = _createContextAndHook6[0],\n  useClientContext = _createContextAndHook6[1];\nvar _createContextAndHook7 = createContextAndHook(\"SessionContext\"),\n  _createContextAndHook8 = _slicedToArray(_createContextAndHook7, 2),\n  SessionContext = _createContextAndHook8[0],\n  useSessionContext = _createContextAndHook8[1];\nvar _createContextAndHook9 = createContextAndHook(\"OrganizationContext\"),\n  _createContextAndHook10 = _slicedToArray(_createContextAndHook9, 2),\n  OrganizationContextInternal = _createContextAndHook10[0],\n  useOrganizationContext = _createContextAndHook10[1];\nvar OrganizationProvider = function OrganizationProvider(_ref2) {\n  var children = _ref2.children,\n    organization = _ref2.organization,\n    lastOrganizationMember = _ref2.lastOrganizationMember,\n    lastOrganizationInvitation = _ref2.lastOrganizationInvitation,\n    swrConfig = _ref2.swrConfig;\n  return /* @__PURE__ */React2.createElement(_SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization: organization,\n        lastOrganizationMember: lastOrganizationMember,\n        lastOrganizationInvitation: lastOrganizationInvitation\n      }\n    }\n  }, children));\n};\nvar OrganizationContext = function OrganizationContext() {\n  deprecated(\"OrganizationContext\", \"Use `OrganizationProvider` instead\");\n  return OrganizationProvider.apply(void 0, arguments);\n};\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  var keysSet = new Set(Object.keys(obj2));\n  var differentKeysObject = {};\n  for (var _i = 0, _Object$keys = Object.keys(obj1); _i < _Object$keys.length; _i++) {\n    var key1 = _Object$keys[_i];\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = function useWithSafeValues(params, defaultValues) {\n  var _params$initialPage, _params$pageSize;\n  var shouldUseDefaults = typeof params === \"boolean\" && params;\n  var initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : (_params$initialPage = params === null || params === void 0 ? void 0 : params.initialPage) !== null && _params$initialPage !== void 0 ? _params$initialPage : defaultValues.initialPage);\n  var pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (_params$pageSize = params === null || params === void 0 ? void 0 : params.pageSize) !== null && _params$pageSize !== void 0 ? _params$pageSize : defaultValues.pageSize);\n  var newObj = {};\n  for (var _i2 = 0, _Object$keys2 = Object.keys(defaultValues); _i2 < _Object$keys2.length; _i2++) {\n    var _params$key;\n    var key = _Object$keys2[_i2];\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (_params$key = params === null || params === void 0 ? void 0 : params[key]) !== null && _params$key !== void 0 ? _params$key : defaultValues[key];\n  }\n  return _objectSpread(_objectSpread({}, newObj), {}, {\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  });\n};\nvar usePagesOrInfinite = function usePagesOrInfinite(params, fetcher, options, cacheKeys) {\n  var _params$initialPage2, _params$initialPage3, _params$pageSize2, _options$enabled, _options$infinite, _options$keepPrevious;\n  var _useState = useState((_params$initialPage2 = params.initialPage) !== null && _params$initialPage2 !== void 0 ? _params$initialPage2 : 1),\n    _useState2 = _slicedToArray(_useState, 2),\n    paginatedPage = _useState2[0],\n    setPaginatedPage = _useState2[1];\n  var initialPageRef = useRef((_params$initialPage3 = params.initialPage) !== null && _params$initialPage3 !== void 0 ? _params$initialPage3 : 1);\n  var pageSizeRef = useRef((_params$pageSize2 = params.pageSize) !== null && _params$pageSize2 !== void 0 ? _params$pageSize2 : 10);\n  var enabled = (_options$enabled = options.enabled) !== null && _options$enabled !== void 0 ? _options$enabled : true;\n  var triggerInfinite = (_options$infinite = options.infinite) !== null && _options$infinite !== void 0 ? _options$infinite : false;\n  var keepPreviousData = (_options$keepPrevious = options.keepPreviousData) !== null && _options$keepPrevious !== void 0 ? _options$keepPrevious : false;\n  var pagesCacheKey = _objectSpread(_objectSpread(_objectSpread({}, cacheKeys), params), {}, {\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  });\n  var _default = default2(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, function (cacheKeyParams) {\n      var requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);\n    }, {\n      keepPreviousData: keepPreviousData\n    }),\n    swrData = _default.data,\n    swrIsValidating = _default.isValidating,\n    swrIsLoading = _default.isLoading,\n    swrError = _default.error,\n    swrMutate = _default.mutate;\n  var _default2 = default3(function (pageIndex) {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n      return _objectSpread(_objectSpread(_objectSpread({}, params), cacheKeys), {}, {\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current\n      });\n    }, function (cacheKeyParams) {\n      var requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);\n    }),\n    swrInfiniteData = _default2.data,\n    swrInfiniteIsLoading = _default2.isLoading,\n    swrInfiniteIsValidating = _default2.isValidating,\n    swrInfiniteError = _default2.error,\n    size = _default2.size,\n    setSize = _default2.setSize,\n    swrInfiniteMutate = _default2.mutate;\n  var page = useMemo(function () {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  var fetchPage = useCallback(function (numberOrgFn) {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  var data = useMemo(function () {\n    var _swrData$data;\n    if (triggerInfinite) {\n      var _swrInfiniteData$map$;\n      return (_swrInfiniteData$map$ = swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.map(function (a) {\n        return a === null || a === void 0 ? void 0 : a.data;\n      }).flat()) !== null && _swrInfiniteData$map$ !== void 0 ? _swrInfiniteData$map$ : [];\n    }\n    return (_swrData$data = swrData === null || swrData === void 0 ? void 0 : swrData.data) !== null && _swrData$data !== void 0 ? _swrData$data : [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  var count = useMemo(function () {\n    var _swrData$total_count;\n    if (triggerInfinite) {\n      var _swrInfiniteData;\n      return (swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : (_swrInfiniteData = swrInfiniteData[(swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.length) - 1]) === null || _swrInfiniteData === void 0 ? void 0 : _swrInfiniteData.total_count) || 0;\n    }\n    return (_swrData$total_count = swrData === null || swrData === void 0 ? void 0 : swrData.total_count) !== null && _swrData$total_count !== void 0 ? _swrData$total_count : 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  var isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  var isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  var isError = !!(triggerInfinite ? swrInfiniteError : swrError);\n  var fetchNext = useCallback(function () {\n    fetchPage(function (n) {\n      return Math.max(0, n + 1);\n    });\n  }, [fetchPage]);\n  var fetchPrevious = useCallback(function () {\n    fetchPage(function (n) {\n      return Math.max(0, n - 1);\n    });\n  }, [fetchPage]);\n  var offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  var pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  var hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  var hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  var setData = triggerInfinite ? function (value) {\n    return swrInfiniteMutate(value, {\n      revalidate: false\n    });\n  } : function (value) {\n    return swrMutate(value, {\n      revalidate: false\n    });\n  };\n  var revalidate = triggerInfinite ? function () {\n    return swrInfiniteMutate();\n  } : function () {\n    return swrMutate();\n  };\n  return {\n    data: data,\n    count: count,\n    isLoading: isLoading,\n    isFetching: isFetching,\n    isError: isError,\n    page: page,\n    pageCount: pageCount,\n    fetchPage: fetchPage,\n    fetchNext: fetchNext,\n    fetchPrevious: fetchPrevious,\n    hasNextPage: hasNextPage,\n    hasPreviousPage: hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate,\n    // Let the hook return type define this type\n    setData: setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganization = function useOrganization(params) {\n  var _ref3 = params || {},\n    invitationListParams = _ref3.invitationList,\n    membershipListParams = _ref3.membershipList,\n    domainListParams = _ref3.domains,\n    membershipRequestsListParams = _ref3.membershipRequests,\n    membersListParams = _ref3.memberships,\n    invitationsListParams = _ref3.invitations;\n  var _useOrganizationConte = useOrganizationContext(),\n    organization = _useOrganizationConte.organization,\n    lastOrganizationMember = _useOrganizationConte.lastOrganizationMember,\n    lastOrganizationInvitation = _useOrganizationConte.lastOrganizationInvitation;\n  var session = useSessionContext();\n  var domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  var membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  var membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false\n  });\n  var invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  var clerk = useClerkInstanceContext();\n  var shouldFetch = !!(clerk.loaded && session && organization);\n  var domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  var membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  var membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role\n  };\n  var invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  var domains = usePagesOrInfinite(_objectSpread({}, domainParams), organization === null || organization === void 0 ? void 0 : organization.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var membershipRequests = usePagesOrInfinite(_objectSpread({}, membershipRequestParams), organization === null || organization === void 0 ? void 0 : organization.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var memberships = usePagesOrInfinite(_objectSpread(_objectSpread({}, membersParams), {}, {\n    paginated: true\n  }), organization === null || organization === void 0 ? void 0 : organization.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var invitations = usePagesOrInfinite(_objectSpread({}, invitationsParams), organization === null || organization === void 0 ? void 0 : organization.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var pendingInvitations = !clerk.loaded ? function () {\n    return [];\n  } : function () {\n    var _clerk$organization;\n    return (_clerk$organization = clerk.organization) === null || _clerk$organization === void 0 ? void 0 : _clerk$organization.getPendingInvitations(invitationListParams);\n  };\n  var currentOrganizationMemberships = !clerk.loaded ? function () {\n    return [];\n  } : function () {\n    var _clerk$organization2;\n    return (_clerk$organization2 = clerk.organization) === null || _clerk$organization2 === void 0 ? void 0 : _clerk$organization2.getMemberships(membershipListParams);\n  };\n  if (invitationListParams) {\n    deprecated(\"invitationList in useOrganization\", \"Use the `invitations` property and return value instead.\");\n  }\n  var _default3 = default2(shouldFetch && invitationListParams ? cacheKey(\"invites\", organization, lastOrganizationInvitation, invitationListParams) : null, pendingInvitations),\n    invitationList = _default3.data,\n    isInvitationsLoading = _default3.isValidating,\n    mutateInvitationList = _default3.mutate;\n  if (membershipListParams) {\n    deprecated(\"membershipList in useOrganization\", \"Use the `memberships` property and return value instead.\");\n  }\n  var _default4 = default2(shouldFetch && membershipListParams ? cacheKey(\"memberships\", organization, lastOrganizationMember, membershipListParams) : null, currentOrganizationMemberships),\n    membershipList = _default4.data,\n    isMembershipsLoading = _default4.isValidating,\n    mutateMembershipList = _default4.mutate;\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization: organization,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization: organization,\n    membershipList: membershipList,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    invitationList: invitationList,\n    unstable__mutate: function unstable__mutate() {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains: domains,\n    membershipRequests: membershipRequests,\n    memberships: memberships,\n    invitations: invitations\n  };\n};\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(function (organizationMembership) {\n    return organizationMembership.organization.id === activeOrganizationId;\n  });\n}\nfunction cacheKey(type, organization, resource, pagination) {\n  return [type, organization.id, resource === null || resource === void 0 ? void 0 : resource.id, resource === null || resource === void 0 ? void 0 : resource.updatedAt, pagination.offset, pagination.limit].filter(Boolean).join(\"-\");\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganizationList = function useOrganizationList(params) {\n  var _ref4 = params || {},\n    userMemberships = _ref4.userMemberships,\n    userInvitations = _ref4.userInvitations,\n    userSuggestions = _ref4.userSuggestions;\n  var userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  var userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  var userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  var clerk = useClerkInstanceContext();\n  var user = useUserContext();\n  var userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  var userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  var userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  var isClerkLoaded = !!(clerk.loaded && user);\n  var memberships = usePagesOrInfinite(_objectSpread(_objectSpread({}, userMembershipsParams), {}, {\n    paginated: true\n  }), user === null || user === void 0 ? void 0 : user.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user === null || user === void 0 ? void 0 : user.id\n  });\n  var invitations = usePagesOrInfinite(_objectSpread({}, userInvitationsParams), user === null || user === void 0 ? void 0 : user.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user === null || user === void 0 ? void 0 : user.id\n  });\n  var suggestions = usePagesOrInfinite(_objectSpread({}, userSuggestionsParams), user === null || user === void 0 ? void 0 : user.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user === null || user === void 0 ? void 0 : user.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      organizationList: void 0,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  var result = {\n    isLoaded: isClerkLoaded,\n    organizationList: createOrganizationList(user.organizationMemberships),\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n  deprecatedObjectProperty(result, \"organizationList\", \"Use `userMemberships` instead.\");\n  return result;\n};\nfunction createOrganizationList(organizationMemberships) {\n  return organizationMemberships.map(function (organizationMembership) {\n    return {\n      membership: organizationMembership,\n      organization: organizationMembership.organization\n    };\n  });\n}\n\n// src/react/hooks/useOrganizations.tsx\nvar useOrganizations = function useOrganizations() {\n  deprecated(\"useOrganizations\", \"Use useOrganizationList, useOrganization, or useClerk instead.\");\n  var clerk = useClerkInstanceContext();\n  if (!clerk.loaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      getOrganizationMemberships: void 0,\n      getOrganization: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    createOrganization: clerk.createOrganization,\n    getOrganizationMemberships: clerk.getOrganizationMemberships,\n    getOrganization: clerk.getOrganization\n  };\n};\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\nexport { ClerkInstanceContext, ClientContext, OrganizationContext, OrganizationProvider, SessionContext, UserContext, assertContextExists, createContextAndHook, useClerkInstanceContext, useClientContext, useOrganization, useOrganizationContext, useOrganizationList, useOrganizations, useSafeLayoutEffect, useSessionContext, useUserContext };","map":{"version":3,"mappings":"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","names":["React","assertContextExists","contextVal","msgOrCtx","Error","displayName","createContextAndHook","options","_ref$assertCtxFn","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","__export","SWRConfig","useSWR","default","useSWRInfinite","__reExport","_createContextAndHook2","ClerkInstanceContext","useClerkInstanceContext","_createContextAndHook4","UserContext","useUserContext","_createContextAndHook6","ClientContext","useClientContext","_createContextAndHook8","SessionContext","useSessionContext","_createContextAndHook10","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","children","organization","lastOrganizationMember","lastOrganizationInvitation","swrConfig","Provider","OrganizationContext","deprecated","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","initialPage","pageSizeRef","pageSize","newObj","key","current","usePagesOrInfinite","fetcher","cacheKeys","_useState2","paginatedPage","setPaginatedPage","enabled","triggerInfinite","infinite","keepPreviousData","pagesCacheKey","requestParams","cacheKeyParams","swrData","data","swrIsValidating","isValidating","swrIsLoading","isLoading","swrError","error","swrMutate","mutate","pageIndex","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","page","fetchPage","numberOrgFn","map","a","flat","count","length","_swrInfiniteData","total_count","isFetching","isError","fetchNext","Math","max","n","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","invitationListParams","invitationList","membershipListParams","membershipList","domainListParams","domains","membershipRequestsListParams","membershipRequests","membersListParams","memberships","invitationsListParams","invitations","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","invitationsSafeValues","clerk","shouldFetch","loaded","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","paginated","getMemberships","getInvitations","pendingInvitations","_clerk$organization","getPendingInvitations","currentOrganizationMemberships","_clerk$organization2","cacheKey","isInvitationsLoading","mutateInvitationList","isMembershipsLoading","mutateMembershipList","isLoaded","membership","getCurrentOrganizationMembership","user","organizationMemberships","unstable__mutate","activeOrganizationId","find","organizationMembership","resource","pagination","updatedAt","offset","limit","filter","Boolean","join","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","organizationList","createOrganization","setActive","result","createOrganizationList","deprecatedObjectProperty","useOrganizations","getOrganization","useSafeLayoutEffect","window","useLayoutEffect","useEffect"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\createContextAndHook.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\clerk-swr.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\contexts.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePagesOrInfinite.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganization.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizationList.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizations.tsx","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSafeLayoutEffect.tsx"],"sourcesContent":["'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\nexport * from 'swr';\nexport { default as useSWR, SWRConfig } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClientResource,\n  LoadedClerk,\n  OrganizationInvitationResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { deprecated } from '../deprecated';\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n\n  /**\n   * @deprecated This property will be dropped in the next major release.\n   * This property is only used in another deprecated part: `invitationList` from useOrganization\n   */\n  lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;\n  /**\n   * @deprecated This property will be dropped in the next major release.\n   * This property is only used in another deprecated part: `membershipList` from useOrganization\n   */\n  lastOrganizationMember: OrganizationMembershipResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n  lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;\n  lastOrganizationMember: OrganizationMembershipResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  lastOrganizationMember,\n  lastOrganizationInvitation,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: {\n            organization,\n            lastOrganizationMember,\n            lastOrganizationInvitation,\n          },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\n/**\n * @deprecated use OrganizationProvider instead\n */\nexport const OrganizationContext = (...args: Parameters<typeof OrganizationProvider>) => {\n  deprecated('OrganizationContext', 'Use `OrganizationProvider` instead');\n  return OrganizationProvider(...args);\n};\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n};\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type { CacheSetter, PaginatedResources, ValueOrSetter } from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\ntype PagesOrInfiniteOptions = {\n  /**\n   * This the starting point for your fetched results. The initial value persists between re-renders\n   */\n  initialPage?: number;\n  /**\n   * Maximum number of items returned per request. The initial value persists between re-renders\n   */\n  pageSize?: number;\n};\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage,\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype DefaultOptions = {\n  /**\n   * Persists the previous pages with new ones in the same array\n   */\n  infinite?: boolean;\n  /**\n   * Return the previous key's data until the new data has been loaded\n   */\n  keepPreviousData?: boolean;\n  /**\n   * Should a request be triggered\n   */\n  enabled?: boolean;\n};\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TOptions extends DefaultOptions = DefaultOptions,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  options: TOptions,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TOptions['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, options, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = options.enabled ?? true;\n  const triggerInfinite = options.infinite ?? false;\n  const keepPreviousData = options.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const isError = !!(triggerInfinite ? swrInfiniteError : swrError);\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  ClerkPaginationParams,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembershipsParams,\n  GetMembersParams,\n  GetPendingInvitationsParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { deprecated } from '../../deprecated';\nimport { useSWR } from '../clerk-swr';\nimport { useClerkInstanceContext, useOrganizationContext, useSessionContext } from '../contexts';\nimport type { PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  /**\n   * @deprecated Use `invitations` instead\n   */\n  invitationList?: GetPendingInvitationsParams;\n  /**\n   * @deprecated Use `memberships` instead\n   */\n  membershipList?: GetMembershipsParams;\n  domains?:\n    | true\n    | (GetDomainsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  membershipRequests?:\n    | true\n    | (GetMembershipRequestParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  memberships?:\n    | true\n    | (GetMembersParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n\n  invitations?:\n    | true\n    | (GetInvitationsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      organization: undefined;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      /**\n       * @deprecated Use `invitations` instead\n       */\n      invitationList: OrganizationInvitationResource[] | null | undefined;\n      /**\n       * @deprecated Use `memberships` instead\n       */\n      membershipList: OrganizationMembershipResource[] | null | undefined;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    invitationList: invitationListParams,\n    membershipList: membershipListParams,\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n  const { organization, lastOrganizationMember, lastOrganizationInvitation } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  const shouldFetch = !!(clerk.loaded && session && organization);\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    {\n      ...membersParams,\n      paginated: true,\n    } as any,\n    organization?.getMemberships as unknown as any,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  // Some gymnastics to adhere to the rules of hooks\n  // We need to make sure useSWR is called on every render\n  const pendingInvitations = !clerk.loaded\n    ? () => [] as OrganizationInvitationResource[]\n    : () => clerk.organization?.getPendingInvitations(invitationListParams);\n\n  const currentOrganizationMemberships = !clerk.loaded\n    ? () => [] as OrganizationMembershipResource[]\n    : () => clerk.organization?.getMemberships(membershipListParams);\n\n  if (invitationListParams) {\n    deprecated('invitationList in useOrganization', 'Use the `invitations` property and return value instead.');\n  }\n\n  const {\n    data: invitationList,\n    isValidating: isInvitationsLoading,\n    mutate: mutateInvitationList,\n  } = useSWR(\n    shouldFetch && invitationListParams\n      ? cacheKey('invites', organization, lastOrganizationInvitation, invitationListParams)\n      : null,\n    pendingInvitations,\n  );\n\n  if (membershipListParams) {\n    deprecated('membershipList in useOrganization', 'Use the `memberships` property and return value instead.');\n  }\n\n  const {\n    data: membershipList,\n    isValidating: isMembershipsLoading,\n    mutate: mutateMembershipList,\n  } = useSWR(\n    shouldFetch && membershipListParams\n      ? cacheKey('memberships', organization, lastOrganizationMember, membershipListParams)\n      : null,\n    currentOrganizationMemberships,\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization,\n    membershipList,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    invitationList,\n    unstable__mutate: () => {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n\nfunction cacheKey(\n  type: 'memberships' | 'invites',\n  organization: OrganizationResource,\n  resource: OrganizationInvitationResource | OrganizationMembershipResource | null | undefined,\n  pagination: ClerkPaginationParams,\n) {\n  return [type, organization.id, resource?.id, resource?.updatedAt, pagination.offset, pagination.limit]\n    .filter(Boolean)\n    .join('-');\n}\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { deprecatedObjectProperty } from '../../deprecated';\nimport { useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  userMemberships?:\n    | true\n    | (GetUserOrganizationMembershipParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  userInvitations?:\n    | true\n    | (GetUserOrganizationInvitationsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  userSuggestions?:\n    | true\n    | (GetUserOrganizationSuggestionsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n};\n\ntype OrganizationList = ReturnType<typeof createOrganizationList>;\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      /**\n       * @deprecated Use userMemberships instead\n       */\n      organizationList: undefined;\n      createOrganization: undefined;\n      setActive: undefined;\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      /**\n       * @deprecated Use userMemberships instead\n       */\n      organizationList: OrganizationList;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    {\n      ...userMembershipsParams,\n      paginated: true,\n    } as any,\n    user?.getOrganizationMemberships as unknown as any,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      organizationList: undefined,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  const result = {\n    isLoaded: isClerkLoaded,\n    organizationList: createOrganizationList(user.organizationMemberships),\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n  deprecatedObjectProperty(result, 'organizationList', 'Use `userMemberships` instead.');\n\n  return result;\n};\n\nfunction createOrganizationList(organizationMemberships: OrganizationMembershipResource[]) {\n  return organizationMemberships.map(organizationMembership => ({\n    membership: organizationMembership,\n    organization: organizationMembership.organization,\n  }));\n}\n","import type { CreateOrganizationParams, OrganizationMembershipResource, OrganizationResource } from '@clerk/types';\n\nimport { deprecated } from '../../deprecated';\nimport { useClerkInstanceContext } from '../contexts';\n\ntype UseOrganizationsReturn =\n  | {\n      isLoaded: false;\n\n      /**\n       * @deprecated Use `createOrganization` from `useOrganizationList`\n       * Example: `const {createOrganization} = useOrganizationList()`\n       */\n      createOrganization: undefined;\n\n      /**\n       * @deprecated Use `memberships` from `useOrganization`\n       * Example: `const {memberships} = useOrganization()`\n       */\n      getOrganizationMemberships: undefined;\n\n      /**\n       * @deprecated Use `getOrganization` from `useClerk`\n       * Example: `const {getOrganization} = useClerk()`\n       */\n      getOrganization: undefined;\n    }\n  | {\n      isLoaded: true;\n      /**\n       * @deprecated Use `createOrganization` from `useOrganizationList`\n       * Example: `const {createOrganization} = useOrganizationList()`\n       */\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n\n      /**\n       * @deprecated Use `memberships` from `useOrganization`\n       * Example: `const {memberships} = useOrganization()`\n       */\n      getOrganizationMemberships: () => Promise<OrganizationMembershipResource[]>;\n\n      /**\n       * @deprecated Use `getOrganization` from `useClerk`\n       * Example: `const {getOrganization} = useClerk()`\n       */\n      getOrganization: (organizationId: string) => Promise<OrganizationResource | undefined>;\n    };\n\ntype UseOrganizations = () => UseOrganizationsReturn;\n\n/**\n * @deprecated Use useOrganizationList, useOrganization, or useClerk instead\n */\nexport const useOrganizations: UseOrganizations = () => {\n  deprecated('useOrganizations', 'Use useOrganizationList, useOrganization, or useClerk instead.');\n  const clerk = useClerkInstanceContext();\n  if (!clerk.loaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      getOrganizationMemberships: undefined,\n      getOrganization: undefined,\n    };\n  }\n\n  return {\n    isLoaded: true,\n    createOrganization: clerk.createOrganization,\n    getOrganizationMemberships: clerk.getOrganizationMemberships,\n    getOrganization: clerk.getOrganization,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}