{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport React, { useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nconst useCustomElementPortal = elements => {\n  const initialState = Array(elements.length).fill(null);\n  const [nodes, setNodes] = useState(initialState);\n  return elements.map((el, index) => ({\n    id: el.id,\n    mount: node => setNodes(prevState => prevState.map((n, i) => i === index ? node : n)),\n    unmount: () => setNodes(prevState => prevState.map((n, i) => i === index ? null : n)),\n    portal: () => /* @__PURE__ */React.createElement(React.Fragment, null, nodes[index] ? createPortal(el.component, nodes[index]) : null)\n  }));\n};\nexport { useCustomElementPortal };","map":{"version":3,"mappings":";AAAA,OAAOA,SAASC,gBAAgB;AAChC,SAASC,oBAAoB;AAgBtB,MAAMC,yBAA0BC,YAA6C;EAClF,MAAMC,eAAeC,MAAMF,SAASG,MAAM,EAAEC,KAAK,IAAI;EACrD,MAAM,CAACC,OAAOC,QAAQ,IAAIT,SAA6BI,YAAY;EAEnE,OAAOD,SAASO,IAAI,CAACC,IAAIC,WAAW;IAClCC,IAAIF,GAAGE;IACPC,OAAQC,QAAkBN,SAASO,aAAaA,UAAUN,IAAI,CAACO,GAAGC,MAAOA,MAAMN,QAAQG,OAAOE,CAAE,CAAC;IACjGE,SAASA,MAAMV,SAASO,aAAaA,UAAUN,IAAI,CAACO,GAAGC,MAAOA,MAAMN,QAAQ,OAAOK,CAAE,CAAC;IACtFG,QAAQA,MAAM,yDAAGZ,MAAMI,KAAK,IAAIX,aAAaU,GAAGU,WAAWb,MAAMI,KAAK,CAAY,IAAI,IAAK;EAC7F,EAAE;AACJ","names":["React","useState","createPortal","useCustomElementPortal","elements","initialState","Array","length","fill","nodes","setNodes","map","el","index","id","mount","node","prevState","n","i","unmount","portal","component"],"sources":["D:\\split project\\SplitEase\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\useCustomElementPortal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport type UseCustomElementPortalParams = {\n  component: React.ReactNode;\n  id: number;\n};\n\nexport type UseCustomElementPortalReturn = {\n  portal: () => JSX.Element;\n  mount: (node: Element) => void;\n  unmount: () => void;\n  id: number;\n};\n\n// This function takes a component as prop, and returns functions that mount and unmount\n// the given component into a given node\nexport const useCustomElementPortal = (elements: UseCustomElementPortalParams[]) => {\n  const initialState = Array(elements.length).fill(null);\n  const [nodes, setNodes] = useState<(Element | null)[]>(initialState);\n\n  return elements.map((el, index) => ({\n    id: el.id,\n    mount: (node: Element) => setNodes(prevState => prevState.map((n, i) => (i === index ? node : n))),\n    unmount: () => setNodes(prevState => prevState.map((n, i) => (i === index ? null : n))),\n    portal: () => <>{nodes[index] ? createPortal(el.component, nodes[index] as Element) : null}</>,\n  }));\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}