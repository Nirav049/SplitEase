{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { deprecated } from \"@clerk/shared/deprecated\";\nimport React from \"react\";\nimport IsomorphicClerk from \"../isomorphicClerk\";\nimport { deriveState } from \"../utils/deriveState\";\nimport { AuthContext } from \"./AuthContext\";\nimport { ClientContext } from \"./ClientContext\";\nimport { IsomorphicClerkContext } from \"./IsomorphicClerkContext\";\nimport { OrganizationProvider } from \"./OrganizationContext\";\nimport { SessionContext } from \"./SessionContext\";\nimport { UserContext } from \"./UserContext\";\nfunction ClerkContextProvider(props) {\n  const {\n    isomorphicClerkOptions,\n    initialState,\n    children\n  } = props;\n  const {\n    isomorphicClerk: clerk,\n    loaded: clerkLoaded\n  } = useLoadedIsomorphicClerk(isomorphicClerkOptions);\n  if (isomorphicClerkOptions.frontendApi) {\n    deprecated(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  const [state, setState] = React.useState({\n    client: clerk.client,\n    session: clerk.session,\n    user: clerk.user,\n    organization: clerk.organization,\n    lastOrganizationInvitation: null,\n    lastOrganizationMember: null\n  });\n  React.useEffect(() => {\n    return clerk.addListener(e => setState({\n      ...e\n    }));\n  }, []);\n  const derivedState = deriveState(clerkLoaded, state, initialState);\n  const clerkCtx = React.useMemo(() => ({\n    value: clerk\n  }), [clerkLoaded]);\n  const clientCtx = React.useMemo(() => ({\n    value: state.client\n  }), [state.client]);\n  const {\n    sessionId,\n    session,\n    userId,\n    user,\n    orgId,\n    actor,\n    lastOrganizationInvitation,\n    lastOrganizationMember,\n    organization,\n    orgRole,\n    orgSlug,\n    orgPermissions\n  } = derivedState;\n  const authCtx = React.useMemo(() => {\n    const value = {\n      sessionId,\n      userId,\n      actor,\n      orgId,\n      orgRole,\n      orgSlug,\n      orgPermissions\n    };\n    return {\n      value\n    };\n  }, [sessionId, userId, actor, orgId, orgRole, orgSlug]);\n  const userCtx = React.useMemo(() => ({\n    value: user\n  }), [userId, user]);\n  const sessionCtx = React.useMemo(() => ({\n    value: session\n  }), [sessionId, session]);\n  const organizationCtx = React.useMemo(() => {\n    const value = {\n      organization,\n      lastOrganizationInvitation,\n      lastOrganizationMember\n    };\n    return {\n      value\n    };\n  }, [orgId, organization, lastOrganizationInvitation, lastOrganizationMember]);\n  return (\n    // @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    /* @__PURE__ */\n    React.createElement(IsomorphicClerkContext.Provider, {\n      value: clerkCtx\n    }, /* @__PURE__ */React.createElement(ClientContext.Provider, {\n      value: clientCtx\n    }, /* @__PURE__ */React.createElement(SessionContext.Provider, {\n      value: sessionCtx\n    }, /* @__PURE__ */React.createElement(OrganizationProvider, {\n      ...organizationCtx.value\n    }, /* @__PURE__ */React.createElement(AuthContext.Provider, {\n      value: authCtx\n    }, /* @__PURE__ */React.createElement(UserContext.Provider, {\n      value: userCtx\n    }, children))))))\n  );\n}\nconst useLoadedIsomorphicClerk = options => {\n  const [loaded, setLoaded] = React.useState(false);\n  const isomorphicClerk = React.useMemo(() => IsomorphicClerk.getOrCreateInstance(options), []);\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({\n      appearance: options.appearance\n    });\n  }, [options.appearance]);\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({\n      options\n    });\n  }, [options.localization]);\n  React.useEffect(() => {\n    isomorphicClerk.addOnLoaded(() => setLoaded(true));\n  }, []);\n  React.useEffect(() => {\n    return () => {\n      IsomorphicClerk.clearInstance();\n    };\n  }, []);\n  return {\n    isomorphicClerk,\n    loaded\n  };\n};\nexport { ClerkContextProvider };","map":{"version":3,"mappings":"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","names":["deprecated","React","IsomorphicClerk","deriveState","AuthContext","ClientContext","IsomorphicClerkContext","OrganizationProvider","SessionContext","UserContext","ClerkContextProvider","props","isomorphicClerkOptions","initialState","children","isomorphicClerk","clerk","loaded","clerkLoaded","useLoadedIsomorphicClerk","frontendApi","state","setState","useState","client","session","user","organization","lastOrganizationInvitation","lastOrganizationMember","useEffect","addListener","e","derivedState","clerkCtx","useMemo","value","clientCtx","sessionId","userId","orgId","actor","orgRole","orgSlug","orgPermissions","authCtx","userCtx","sessionCtx","organizationCtx","Provider","options","setLoaded","getOrCreateInstance","__unstable__updateProps","appearance","localization","addOnLoaded","clearInstance"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\contexts\\ClerkContextProvider.tsx"],"sourcesContent":["import { deprecated } from '@clerk/shared/deprecated';\nimport type { ClientResource, InitialState, Resources } from '@clerk/types';\nimport React from 'react';\n\nimport IsomorphicClerk from '../isomorphicClerk';\nimport type { IsomorphicClerkOptions } from '../types';\nimport { deriveState } from '../utils/deriveState';\nimport { AuthContext } from './AuthContext';\nimport { ClientContext } from './ClientContext';\nimport { IsomorphicClerkContext } from './IsomorphicClerkContext';\nimport { OrganizationProvider } from './OrganizationContext';\nimport { SessionContext } from './SessionContext';\nimport { UserContext } from './UserContext';\n\ntype ClerkContextProvider = {\n  isomorphicClerkOptions: IsomorphicClerkOptions;\n  initialState: InitialState | undefined;\n  children: React.ReactNode;\n};\n\nexport type ClerkContextProviderState = Resources;\n\nexport function ClerkContextProvider(props: ClerkContextProvider): JSX.Element | null {\n  const { isomorphicClerkOptions, initialState, children } = props;\n  const { isomorphicClerk: clerk, loaded: clerkLoaded } = useLoadedIsomorphicClerk(isomorphicClerkOptions);\n\n  if (isomorphicClerkOptions.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n\n  const [state, setState] = React.useState<ClerkContextProviderState>({\n    client: clerk.client as ClientResource,\n    session: clerk.session,\n    user: clerk.user,\n    organization: clerk.organization,\n    lastOrganizationInvitation: null,\n    lastOrganizationMember: null,\n  });\n\n  React.useEffect(() => {\n    return clerk.addListener(e => setState({ ...e }));\n  }, []);\n\n  const derivedState = deriveState(clerkLoaded, state, initialState);\n  const clerkCtx = React.useMemo(() => ({ value: clerk }), [clerkLoaded]);\n  const clientCtx = React.useMemo(() => ({ value: state.client }), [state.client]);\n\n  const {\n    sessionId,\n    session,\n    userId,\n    user,\n    orgId,\n    actor,\n    lastOrganizationInvitation,\n    lastOrganizationMember,\n    organization,\n    orgRole,\n    orgSlug,\n    orgPermissions,\n  } = derivedState;\n\n  const authCtx = React.useMemo(() => {\n    const value = { sessionId, userId, actor, orgId, orgRole, orgSlug, orgPermissions };\n    return { value };\n  }, [sessionId, userId, actor, orgId, orgRole, orgSlug]);\n  const userCtx = React.useMemo(() => ({ value: user }), [userId, user]);\n  const sessionCtx = React.useMemo(() => ({ value: session }), [sessionId, session]);\n  const organizationCtx = React.useMemo(() => {\n    const value = {\n      organization: organization,\n      lastOrganizationInvitation: lastOrganizationInvitation,\n      lastOrganizationMember: lastOrganizationMember,\n    };\n    return { value };\n  }, [orgId, organization, lastOrganizationInvitation, lastOrganizationMember]);\n\n  return (\n    // @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    <IsomorphicClerkContext.Provider value={clerkCtx}>\n      <ClientContext.Provider value={clientCtx}>\n        <SessionContext.Provider value={sessionCtx}>\n          <OrganizationProvider {...organizationCtx.value}>\n            <AuthContext.Provider value={authCtx}>\n              <UserContext.Provider value={userCtx}>{children}</UserContext.Provider>\n            </AuthContext.Provider>\n          </OrganizationProvider>\n        </SessionContext.Provider>\n      </ClientContext.Provider>\n    </IsomorphicClerkContext.Provider>\n  );\n}\n\nconst useLoadedIsomorphicClerk = (options: IsomorphicClerkOptions) => {\n  const [loaded, setLoaded] = React.useState(false);\n  const isomorphicClerk = React.useMemo(() => IsomorphicClerk.getOrCreateInstance(options), []);\n\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({ appearance: options.appearance });\n  }, [options.appearance]);\n\n  React.useEffect(() => {\n    isomorphicClerk.__unstable__updateProps({ options });\n  }, [options.localization]);\n\n  React.useEffect(() => {\n    isomorphicClerk.addOnLoaded(() => setLoaded(true));\n  }, []);\n\n  React.useEffect(() => {\n    return () => {\n      IsomorphicClerk.clearInstance();\n    };\n  }, []);\n\n  return { isomorphicClerk, loaded };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}