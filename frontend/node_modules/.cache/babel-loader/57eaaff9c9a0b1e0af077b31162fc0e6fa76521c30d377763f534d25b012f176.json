{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { useCallback } from \"react\";\nimport { useAuthContext } from \"../contexts/AuthContext\";\nimport { useIsomorphicClerkContext } from \"../contexts/IsomorphicClerkContext\";\nimport { invalidStateError, useAuthHasRequiresRoleOrPermission } from \"../errors\";\nimport { createGetToken, createSignOut } from \"./utils\";\nvar useAuth = function useAuth() {\n  var _useAuthContext = useAuthContext(),\n    sessionId = _useAuthContext.sessionId,\n    userId = _useAuthContext.userId,\n    actor = _useAuthContext.actor,\n    orgId = _useAuthContext.orgId,\n    orgRole = _useAuthContext.orgRole,\n    orgSlug = _useAuthContext.orgSlug,\n    orgPermissions = _useAuthContext.orgPermissions;\n  var isomorphicClerk = useIsomorphicClerkContext();\n  var getToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  var signOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n  var has = useCallback(function (params) {\n    if (!(params !== null && params !== void 0 && params.permission) && !(params !== null && params !== void 0 && params.role)) {\n      throw new Error(useAuthHasRequiresRoleOrPermission);\n    }\n    if (!orgId || !userId || !orgRole || !orgPermissions) {\n      return false;\n    }\n    if (params.permission) {\n      return orgPermissions.includes(params.permission);\n    }\n    if (params.role) {\n      return orgRole === params.role;\n    }\n    return false;\n  }, [orgId, orgRole, userId, orgPermissions]);\n  if (sessionId === void 0 && userId === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      sessionId: sessionId,\n      userId: userId,\n      actor: void 0,\n      orgId: void 0,\n      orgRole: void 0,\n      orgSlug: void 0,\n      has: void 0,\n      signOut: signOut,\n      getToken: getToken\n    };\n  }\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId: sessionId,\n      userId: userId,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: function has() {\n        return false;\n      },\n      signOut: signOut,\n      getToken: getToken\n    };\n  }\n  if (!!sessionId && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId: sessionId,\n      userId: userId,\n      actor: actor || null,\n      orgId: orgId,\n      orgRole: orgRole,\n      orgSlug: orgSlug || null,\n      has: has,\n      signOut: signOut,\n      getToken: getToken\n    };\n  }\n  if (!!sessionId && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId: sessionId,\n      userId: userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: function has() {\n        return false;\n      },\n      signOut: signOut,\n      getToken: getToken\n    };\n  }\n  throw new Error(invalidStateError);\n};\nexport { useAuth };","map":{"version":3,"mappings":";AAOA,SAASA,mBAAmB;AAE5B,SAASC,sBAAsB;AAC/B,SAASC,iCAAiC;AAC1C,SAASC,mBAAmBC,0CAA0C;AAEtE,SAASC,gBAAgBC,qBAAqB;AAoGvC,IAAMC,UAAmB,SAAnBA,UAAyB;EACpC,sBAA8EN,eAAe;IAArFO;IAAWC;IAAQC;IAAOC;IAAOC;IAASC;IAASC;EAC3D,IAAMC,kBAAkBb,0BAA0B;EAElD,IAAMc,WAAqBhB,YAAYK,eAAeU,eAAe,GAAG,CAACA,eAAe,CAAC;EACzF,IAAME,UAAmBjB,YAAYM,cAAcS,eAAe,GAAG,CAACA,eAAe,CAAC;EAEtF,IAAMG,MAAMlB,YACV,UAACmB,QAAmE;IAClE,IAAI,EAACA,+CAAQC,eAAc,EAACD,+CAAQE,OAAM;MACxC,MAAM,IAAIC,MAAMlB,kCAAkC;IACpD;IAEA,IAAI,CAACO,SAAS,CAACF,UAAU,CAACG,WAAW,CAACE,gBAAgB;MACpD,OAAO;IACT;IAEA,IAAIK,OAAOC,YAAY;MACrB,OAAON,eAAeS,SAASJ,OAAOC,UAAU;IAClD;IAEA,IAAID,OAAOE,MAAM;MACf,OAAOT,YAAYO,OAAOE;IAC5B;IAEA,OAAO;EACT,GACA,CAACV,OAAOC,SAASH,QAAQK,cAAc,CACzC;EAEA,IAAIN,cAAc,UAAaC,WAAW,QAAW;IACnD,OAAO;MACLe,UAAU;MACVC,YAAY;MACZjB;MACAC;MACAC,OAAO;MACPC,OAAO;MACPC,SAAS;MACTC,SAAS;MACTK,KAAK;MACLD;MACAD;IACF;EACF;EAEA,IAAIR,cAAc,QAAQC,WAAW,MAAM;IACzC,OAAO;MACLe,UAAU;MACVC,YAAY;MACZjB;MACAC;MACAC,OAAO;MACPC,OAAO;MACPC,SAAS;MACTC,SAAS;MACTK,KAAK;QAAA,OAAM;MAAA;MACXD;MACAD;IACF;EACF;EAEA,IAAI,CAAC,CAACR,aAAa,CAAC,CAACC,UAAU,CAAC,CAACE,SAAS,CAAC,CAACC,SAAS;IACnD,OAAO;MACLY,UAAU;MACVC,YAAY;MACZjB;MACAC;MACAC,OAAOA,SAAS;MAChBC;MACAC;MACAC,SAASA,WAAW;MACpBK;MACAD;MACAD;IACF;EACF;EAEA,IAAI,CAAC,CAACR,aAAa,CAAC,CAACC,UAAU,CAACE,OAAO;IACrC,OAAO;MACLa,UAAU;MACVC,YAAY;MACZjB;MACAC;MACAC,OAAOA,SAAS;MAChBC,OAAO;MACPC,SAAS;MACTC,SAAS;MACTK,KAAK;QAAA,OAAM;MAAA;MACXD;MACAD;IACF;EACF;EAEA,MAAM,IAAIM,MAAMnB,iBAAiB;AACnC","names":["useCallback","useAuthContext","useIsomorphicClerkContext","invalidStateError","useAuthHasRequiresRoleOrPermission","createGetToken","createSignOut","useAuth","sessionId","userId","actor","orgId","orgRole","orgSlug","orgPermissions","isomorphicClerk","getToken","signOut","has","params","permission","role","Error","includes","isLoaded","isSignedIn"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useAuth.ts"],"sourcesContent":["import type {\n  ActJWTClaim,\n  CheckAuthorizationWithCustomPermissions,\n  GetToken,\n  MembershipRole,\n  SignOut,\n} from '@clerk/types';\nimport { useCallback } from 'react';\n\nimport { useAuthContext } from '../contexts/AuthContext';\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { invalidStateError, useAuthHasRequiresRoleOrPermission } from '../errors';\nimport type IsomorphicClerk from '../isomorphicClerk';\nimport { createGetToken, createSignOut } from './utils';\n\ntype CheckAuthorizationSignedOut = undefined;\ntype CheckAuthorizationWithoutOrgOrUser = (params?: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => false;\n\ntype UseAuthReturn =\n  | {\n      isLoaded: false;\n      isSignedIn: undefined;\n      userId: undefined;\n      sessionId: undefined;\n      actor: undefined;\n      orgId: undefined;\n      orgRole: undefined;\n      orgSlug: undefined;\n      has: CheckAuthorizationSignedOut;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: false;\n      userId: null;\n      sessionId: null;\n      actor: null;\n      orgId: null;\n      orgRole: null;\n      orgSlug: null;\n      has: CheckAuthorizationWithoutOrgOrUser;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: true;\n      userId: string;\n      sessionId: string;\n      actor: ActJWTClaim | null;\n      orgId: null;\n      orgRole: null;\n      orgSlug: null;\n      has: CheckAuthorizationWithoutOrgOrUser;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: true;\n      userId: string;\n      sessionId: string;\n      actor: ActJWTClaim | null;\n      orgId: string;\n      orgRole: MembershipRole;\n      orgSlug: string | null;\n      has: CheckAuthorizationWithCustomPermissions;\n      signOut: SignOut;\n      getToken: GetToken;\n    };\n\ntype UseAuth = () => UseAuthReturn;\n\n/**\n * Returns the current auth state, the user and session ids and the `getToken`\n * that can be used to retrieve the given template or the default Clerk token.\n *\n * Until Clerk loads, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access the `userId` and `sessionId` variables.\n *\n * For projects using NextJs or Remix, you can have immediate access to this data  during SSR\n * simply by using the `withServerSideAuth` helper.\n *\n * @example\n * A simple example:\n *\n * import { useAuth } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, sessionId, userId } = useAuth();\n *   if(isSignedIn) {\n *     return null;\n *   }\n *   console.log(sessionId, userId)\n *   return <div>...</div>\n * }\n *\n * @example\n * Basic example in a NextJs app. This page will be fully rendered during SSR:\n *\n * import { useAuth } from '@clerk/nextjs'\n * import { withServerSideAuth } from '@clerk/nextjs/api'\n *\n * export getServerSideProps = withServerSideAuth();\n *\n * export HelloPage = () => {\n *   const { isSignedIn, sessionId, userId } = useAuth();\n *   console.log(isSignedIn, sessionId, userId)\n *   return <div>...</div>\n * }\n */\nexport const useAuth: UseAuth = () => {\n  const { sessionId, userId, actor, orgId, orgRole, orgSlug, orgPermissions } = useAuthContext();\n  const isomorphicClerk = useIsomorphicClerkContext() as unknown as IsomorphicClerk;\n\n  const getToken: GetToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  const signOut: SignOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n\n  const has = useCallback(\n    (params: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => {\n      if (!params?.permission && !params?.role) {\n        throw new Error(useAuthHasRequiresRoleOrPermission);\n      }\n\n      if (!orgId || !userId || !orgRole || !orgPermissions) {\n        return false;\n      }\n\n      if (params.permission) {\n        return orgPermissions.includes(params.permission);\n      }\n\n      if (params.role) {\n        return orgRole === params.role;\n      }\n\n      return false;\n    },\n    [orgId, orgRole, userId, orgPermissions],\n  );\n\n  if (sessionId === undefined && userId === undefined) {\n    return {\n      isLoaded: false,\n      isSignedIn: undefined,\n      sessionId,\n      userId,\n      actor: undefined,\n      orgId: undefined,\n      orgRole: undefined,\n      orgSlug: undefined,\n      has: undefined,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId,\n      userId,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (!!sessionId && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId,\n      orgRole,\n      orgSlug: orgSlug || null,\n      has,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (!!sessionId && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    };\n  }\n\n  throw new Error(invalidStateError);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}