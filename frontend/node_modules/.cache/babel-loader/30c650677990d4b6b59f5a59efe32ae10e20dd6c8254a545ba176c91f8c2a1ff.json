{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { logErrorInDevMode } from \"@clerk/shared\";\nimport React from \"react\";\nimport { OrganizationProfileLink, OrganizationProfilePage, UserProfileLink, UserProfilePage } from \"../components/uiComponents\";\nimport { customLinkWrongProps, customPagesIgnoredComponent, customPageWrongProps } from \"../errors\";\nimport { useCustomElementPortal } from \"./useCustomElementPortal\";\nconst isThatComponent = (v, component) => {\n  return !!v && React.isValidElement(v) && (v === null || v === void 0 ? void 0 : v.type) === component;\n};\nconst useUserProfileCustomPages = children => {\n  const reorderItemsLabels = [\"account\", \"security\"];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: UserProfileLink,\n    PageComponent: UserProfilePage,\n    componentName: \"UserProfile\"\n  });\n};\nconst useOrganizationProfileCustomPages = children => {\n  const reorderItemsLabels = [\"members\", \"settings\"];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: OrganizationProfileLink,\n    PageComponent: OrganizationProfilePage,\n    componentName: \"OrganizationProfile\"\n  });\n};\nconst useCustomPages = _ref => {\n  let {\n    children,\n    LinkComponent,\n    PageComponent,\n    reorderItemsLabels,\n    componentName\n  } = _ref;\n  const validChildren = [];\n  React.Children.forEach(children, child => {\n    if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent)) {\n      if (child) {\n        logErrorInDevMode(customPagesIgnoredComponent(componentName));\n      }\n      return;\n    }\n    const {\n      props\n    } = child;\n    const {\n      children: children2,\n      label,\n      url,\n      labelIcon\n    } = props;\n    if (isThatComponent(child, PageComponent)) {\n      if (isReorderItem(props, reorderItemsLabels)) {\n        validChildren.push({\n          label\n        });\n      } else if (isCustomPage(props)) {\n        validChildren.push({\n          label,\n          labelIcon,\n          children: children2,\n          url\n        });\n      } else {\n        logErrorInDevMode(customPageWrongProps(componentName));\n        return;\n      }\n    }\n    if (isThatComponent(child, LinkComponent)) {\n      if (isExternalLink(props)) {\n        validChildren.push({\n          label,\n          labelIcon,\n          url\n        });\n      } else {\n        logErrorInDevMode(customLinkWrongProps(componentName));\n        return;\n      }\n    }\n  });\n  const customPageContents = [];\n  const customPageLabelIcons = [];\n  const customLinkLabelIcons = [];\n  validChildren.forEach((cp, index) => {\n    if (isCustomPage(cp)) {\n      customPageContents.push({\n        component: cp.children,\n        id: index\n      });\n      customPageLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n      return;\n    }\n    if (isExternalLink(cp)) {\n      customLinkLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n    }\n  });\n  const customPageContentsPortals = useCustomElementPortal(customPageContents);\n  const customPageLabelIconsPortals = useCustomElementPortal(customPageLabelIcons);\n  const customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n  const customPages = [];\n  const customPagesPortals = [];\n  validChildren.forEach((cp, index) => {\n    if (isReorderItem(cp, reorderItemsLabels)) {\n      customPages.push({\n        label: cp.label\n      });\n      return;\n    }\n    if (isCustomPage(cp)) {\n      const {\n        portal: contentPortal,\n        mount,\n        unmount\n      } = customPageContentsPortals.find(p => p.id === index);\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customPageLabelIconsPortals.find(p => p.id === index);\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mount,\n        unmount,\n        mountIcon,\n        unmountIcon\n      });\n      customPagesPortals.push(contentPortal);\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n    if (isExternalLink(cp)) {\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customLinkLabelIconsPortals.find(p => p.id === index);\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mountIcon,\n        unmountIcon\n      });\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n  });\n  return {\n    customPages,\n    customPagesPortals\n  };\n};\nconst isReorderItem = (childProps, validItems) => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !children && !url && !labelIcon && validItems.some(v => v === label);\n};\nconst isCustomPage = childProps => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !!children && !!url && !!labelIcon && !!label;\n};\nconst isExternalLink = childProps => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !children && !!url && !!labelIcon && !!label;\n};\nexport { useOrganizationProfileCustomPages, useUserProfileCustomPages };","map":{"version":3,"mappings":"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","names":["logErrorInDevMode","React","OrganizationProfileLink","OrganizationProfilePage","UserProfileLink","UserProfilePage","customLinkWrongProps","customPagesIgnoredComponent","customPageWrongProps","useCustomElementPortal","isThatComponent","v","component","isValidElement","type","useUserProfileCustomPages","children","reorderItemsLabels","useCustomPages","LinkComponent","PageComponent","componentName","useOrganizationProfileCustomPages","_ref","validChildren","Children","forEach","child","props","label","url","labelIcon","isReorderItem","push","isCustomPage","isExternalLink","customPageContents","customPageLabelIcons","customLinkLabelIcons","cp","index","id","customPageContentsPortals","customPageLabelIconsPortals","customLinkLabelIconsPortals","customPages","customPagesPortals","portal","contentPortal","mount","unmount","find","p","labelPortal","mountIcon","unmountIcon","childProps","validItems","some"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\useCustomPages.tsx"],"sourcesContent":["import { logErrorInDevMode } from '@clerk/shared';\nimport type { CustomPage } from '@clerk/types';\nimport type { ReactElement } from 'react';\nimport React from 'react';\n\nimport {\n  OrganizationProfileLink,\n  OrganizationProfilePage,\n  UserProfileLink,\n  UserProfilePage,\n} from '../components/uiComponents';\nimport { customLinkWrongProps, customPagesIgnoredComponent, customPageWrongProps } from '../errors';\nimport type { UserProfilePageProps } from '../types';\nimport type { UseCustomElementPortalParams, UseCustomElementPortalReturn } from './useCustomElementPortal';\nimport { useCustomElementPortal } from './useCustomElementPortal';\n\nconst isThatComponent = (v: any, component: React.ReactNode): v is React.ReactNode => {\n  return !!v && React.isValidElement(v) && (v as React.ReactElement)?.type === component;\n};\n\nexport const useUserProfileCustomPages = (children: React.ReactNode | React.ReactNode[]) => {\n  const reorderItemsLabels = ['account', 'security'];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: UserProfileLink,\n    PageComponent: UserProfilePage,\n    componentName: 'UserProfile',\n  });\n};\n\nexport const useOrganizationProfileCustomPages = (children: React.ReactNode | React.ReactNode[]) => {\n  const reorderItemsLabels = ['members', 'settings'];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: OrganizationProfileLink,\n    PageComponent: OrganizationProfilePage,\n    componentName: 'OrganizationProfile',\n  });\n};\n\ntype UseCustomPagesParams = {\n  children: React.ReactNode | React.ReactNode[];\n  LinkComponent: any;\n  PageComponent: any;\n  reorderItemsLabels: string[];\n  componentName: string;\n};\n\ntype CustomPageWithIdType = UserProfilePageProps & { children?: React.ReactNode };\n\nconst useCustomPages = ({\n  children,\n  LinkComponent,\n  PageComponent,\n  reorderItemsLabels,\n  componentName,\n}: UseCustomPagesParams) => {\n  const validChildren: CustomPageWithIdType[] = [];\n\n  React.Children.forEach(children, child => {\n    if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent)) {\n      if (child) {\n        logErrorInDevMode(customPagesIgnoredComponent(componentName));\n      }\n      return;\n    }\n\n    const { props } = child as ReactElement;\n\n    const { children, label, url, labelIcon } = props;\n\n    if (isThatComponent(child, PageComponent)) {\n      if (isReorderItem(props, reorderItemsLabels)) {\n        // This is a reordering item\n        validChildren.push({ label });\n      } else if (isCustomPage(props)) {\n        // this is a custom page\n        validChildren.push({ label, labelIcon, children, url });\n      } else {\n        logErrorInDevMode(customPageWrongProps(componentName));\n        return;\n      }\n    }\n\n    if (isThatComponent(child, LinkComponent)) {\n      if (isExternalLink(props)) {\n        // This is an external link\n        validChildren.push({ label, labelIcon, url });\n      } else {\n        logErrorInDevMode(customLinkWrongProps(componentName));\n        return;\n      }\n    }\n  });\n\n  const customPageContents: UseCustomElementPortalParams[] = [];\n  const customPageLabelIcons: UseCustomElementPortalParams[] = [];\n  const customLinkLabelIcons: UseCustomElementPortalParams[] = [];\n\n  validChildren.forEach((cp, index) => {\n    if (isCustomPage(cp)) {\n      customPageContents.push({ component: cp.children, id: index });\n      customPageLabelIcons.push({ component: cp.labelIcon, id: index });\n      return;\n    }\n    if (isExternalLink(cp)) {\n      customLinkLabelIcons.push({ component: cp.labelIcon, id: index });\n    }\n  });\n\n  const customPageContentsPortals = useCustomElementPortal(customPageContents);\n  const customPageLabelIconsPortals = useCustomElementPortal(customPageLabelIcons);\n  const customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n\n  const customPages: CustomPage[] = [];\n  const customPagesPortals: React.ComponentType[] = [];\n\n  validChildren.forEach((cp, index) => {\n    if (isReorderItem(cp, reorderItemsLabels)) {\n      customPages.push({ label: cp.label });\n      return;\n    }\n    if (isCustomPage(cp)) {\n      const {\n        portal: contentPortal,\n        mount,\n        unmount,\n      } = customPageContentsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon,\n      } = customPageLabelIconsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      customPages.push({ label: cp.label, url: cp.url, mount, unmount, mountIcon, unmountIcon });\n      customPagesPortals.push(contentPortal);\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n    if (isExternalLink(cp)) {\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon,\n      } = customLinkLabelIconsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      customPages.push({ label: cp.label, url: cp.url, mountIcon, unmountIcon });\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n  });\n\n  return { customPages, customPagesPortals };\n};\n\nconst isReorderItem = (childProps: any, validItems: string[]): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !children && !url && !labelIcon && validItems.some(v => v === label);\n};\n\nconst isCustomPage = (childProps: any): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !!children && !!url && !!labelIcon && !!label;\n};\n\nconst isExternalLink = (childProps: any): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !children && !!url && !!labelIcon && !!label;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}