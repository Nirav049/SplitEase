{"ast":null,"code":"import _defineProperty from \"D:/split project/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/*!\n * Chart.js v4.2.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = \"animation-\".concat(transition);\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing'\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nclass PieController extends DoughnutController {}\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nclass ScatterController extends DatasetController {\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height1 = chartArea.h * weight;\n      const width1 = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n      }\n      stack.start = x;\n      stack.placed += height1;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  constructor() {\n    _defineProperty(this, \"active\", false);\n  }\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID1 = Object.keys(position)[0];\n      const value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret1 = this._getYAxisLabelAlignment(tl);\n      textAlign = ret1.textAlign;\n      x = ret1.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i1 = 0; i1 < local.length; i1++) {\n    const plugin = local[i1];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n  if (id) {\n    return id;\n  }\n  throw new Error(\"Cannot determine type of '\".concat(name, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[\"datasets.\".concat(datasetType), '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), () => [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), () => [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), () => [[\"plugins.\".concat(id), ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.2.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nclass Chart {\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n      this._updateDataset(i1, isFunction(mode) ? mode({\n        datasetIndex: i1\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  /**\n  * @type {any}\n  */\n\n  /**\n  * @type {any}\n  */\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n_defineProperty(PointElement, \"id\", 'point');\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox1 of hitboxes) {\n        if (hitbox1.col !== col) {\n          col = hitbox1.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox1.top = top;\n        hitbox1.left += this.left + padding;\n        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n        top += hitbox1.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","new","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_ref4","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","configurable","enumerable","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_ref5","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_ref6","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","adapters","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animator.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animation.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animations.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.datasetController.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.line.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.adapters.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.interaction.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.layouts.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.base.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.basic.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.dom.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\index.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.element.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.registry.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.plugins.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.config.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.controller.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.arc.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.line.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.point.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.bar.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.category.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linear.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.time.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}