{"ast":null,"code":"// src/date.ts\nvar MILLISECONDS_IN_DAY = 864e5;\nfunction dateTo12HourTime(date) {\n  if (!date) {\n    return \"\";\n  }\n  return date.toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"numeric\",\n    hour12: true\n  });\n}\nfunction differenceInCalendarDays(a, b) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$absolute = _ref.absolute,\n    absolute = _ref$absolute === void 0 ? true : _ref$absolute;\n  if (!a || !b) {\n    return 0;\n  }\n  var utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  var utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n  var diff = Math.floor((utcB - utcA) / MILLISECONDS_IN_DAY);\n  return absolute ? Math.abs(diff) : diff;\n}\nfunction normalizeDate(d) {\n  try {\n    return new Date(d || /* @__PURE__ */new Date());\n  } catch (e) {\n    return /* @__PURE__ */new Date();\n  }\n}\nfunction formatRelative(props) {\n  var date = props.date,\n    relativeTo = props.relativeTo;\n  if (!date || !relativeTo) {\n    return null;\n  }\n  var a = normalizeDate(date);\n  var b = normalizeDate(relativeTo);\n  var differenceInDays = differenceInCalendarDays(b, a, {\n    absolute: false\n  });\n  if (differenceInDays < -6) {\n    return {\n      relativeDateCase: \"other\",\n      date: a\n    };\n  }\n  if (differenceInDays < -1) {\n    return {\n      relativeDateCase: \"previous6Days\",\n      date: a\n    };\n  }\n  if (differenceInDays === -1) {\n    return {\n      relativeDateCase: \"lastDay\",\n      date: a\n    };\n  }\n  if (differenceInDays === 0) {\n    return {\n      relativeDateCase: \"sameDay\",\n      date: a\n    };\n  }\n  if (differenceInDays === 1) {\n    return {\n      relativeDateCase: \"nextDay\",\n      date: a\n    };\n  }\n  if (differenceInDays < 7) {\n    return {\n      relativeDateCase: \"next6Days\",\n      date: a\n    };\n  }\n  return {\n    relativeDateCase: \"other\",\n    date: a\n  };\n}\nfunction addYears(initialDate, yearsToAdd) {\n  var date = normalizeDate(initialDate);\n  date.setFullYear(date.getFullYear() + yearsToAdd);\n  return date;\n}\nexport { dateTo12HourTime, differenceInCalendarDays, normalizeDate, formatRelative, addYears };","map":{"version":3,"mappings":";AAAA,IAAMA,sBAAsB;AAErB,SAASC,iBAAiBC,MAAoB;EACnD,IAAI,CAACA,MAAM;IACT,OAAO;EACT;EACA,OAAOA,KAAKC,eAAe,SAAS;IAClCC,MAAM;IACNC,QAAQ;IACRC,QAAQ;EACV,CAAC;AACH;AAEO,SAASC,yBAAyBC,GAASC,GAA2C;EAAA,+EAAZ,CAAC;IAAAC,qBAArBC;IAAAA,sCAAW;EACtE,IAAI,CAACH,KAAK,CAACC,GAAG;IACZ,OAAO;EACT;EACA,IAAMG,OAAOC,KAAKC,IAAIN,EAAEO,YAAY,GAAGP,EAAEQ,SAAS,GAAGR,EAAES,QAAQ,CAAC;EAChE,IAAMC,OAAOL,KAAKC,IAAIL,EAAEM,YAAY,GAAGN,EAAEO,SAAS,GAAGP,EAAEQ,QAAQ,CAAC;EAChE,IAAME,OAAOC,KAAKC,OAAOH,OAAON,QAAQZ,mBAAmB;EAC3D,OAAOW,WAAWS,KAAKE,IAAIH,IAAI,IAAIA;AACrC;AAEO,SAASI,cAAcC,GAAiC;EAC7D,IAAI;IACF,OAAO,IAAIX,KAAKW,KAAK,mBAAIX,KAAK,CAAC;EACjC,SAASY,GAAG;IACV,OAAO,mBAAIZ,KAAK;EAClB;AACF;AAUO,SAASa,eAAeC,OAAqD;EAClF,IAAQzB,OAAqByB,MAArBzB;IAAM0B,aAAeD,MAAfC;EACd,IAAI,CAAC1B,QAAQ,CAAC0B,YAAY;IACxB,OAAO;EACT;EACA,IAAMpB,IAAIe,cAAcrB,IAAI;EAC5B,IAAMO,IAAIc,cAAcK,UAAU;EAClC,IAAMC,mBAAmBtB,yBAAyBE,GAAGD,GAAG;IAAEG,UAAU;EAAM,CAAC;EAE3E,IAAIkB,mBAAmB,IAAI;IACzB,OAAO;MAAEC,kBAAkB;MAAS5B,MAAMM;IAAE;EAC9C;EACA,IAAIqB,mBAAmB,IAAI;IACzB,OAAO;MAAEC,kBAAkB;MAAiB5B,MAAMM;IAAE;EACtD;EACA,IAAIqB,qBAAqB,IAAI;IAC3B,OAAO;MAAEC,kBAAkB;MAAW5B,MAAMM;IAAE;EAChD;EACA,IAAIqB,qBAAqB,GAAG;IAC1B,OAAO;MAAEC,kBAAkB;MAAW5B,MAAMM;IAAE;EAChD;EACA,IAAIqB,qBAAqB,GAAG;IAC1B,OAAO;MAAEC,kBAAkB;MAAW5B,MAAMM;IAAE;EAChD;EACA,IAAIqB,mBAAmB,GAAG;IACxB,OAAO;MAAEC,kBAAkB;MAAa5B,MAAMM;IAAE;EAClD;EACA,OAAO;IAAEsB,kBAAkB;IAAS5B,MAAMM;EAAE;AAC9C;AAEO,SAASuB,SAASC,aAAqCC,YAA0B;EACtF,IAAM/B,OAAOqB,cAAcS,WAAW;EACtC9B,KAAKgC,YAAYhC,KAAKa,YAAY,IAAIkB,UAAU;EAChD,OAAO/B;AACT","names":["MILLISECONDS_IN_DAY","dateTo12HourTime","date","toLocaleString","hour","minute","hour12","differenceInCalendarDays","a","b","_ref$absolute","absolute","utcA","Date","UTC","getFullYear","getMonth","getDate","utcB","diff","Math","floor","abs","normalizeDate","d","e","formatRelative","props","relativeTo","differenceInDays","relativeDateCase","addYears","initialDate","yearsToAdd","setFullYear"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\date.ts"],"sourcesContent":["const MILLISECONDS_IN_DAY = 86400000;\n\nexport function dateTo12HourTime(date: Date): string {\n  if (!date) {\n    return '';\n  }\n  return date.toLocaleString('en-US', {\n    hour: '2-digit',\n    minute: 'numeric',\n    hour12: true,\n  });\n}\n\nexport function differenceInCalendarDays(a: Date, b: Date, { absolute = true } = {}): number {\n  if (!a || !b) {\n    return 0;\n  }\n  const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n  const diff = Math.floor((utcB - utcA) / MILLISECONDS_IN_DAY);\n  return absolute ? Math.abs(diff) : diff;\n}\n\nexport function normalizeDate(d: Date | string | number): Date {\n  try {\n    return new Date(d || new Date());\n  } catch (e) {\n    return new Date();\n  }\n}\n\ntype DateFormatRelativeParams = {\n  date: Date | string | number;\n  relativeTo: Date | string | number;\n};\n\nexport type RelativeDateCase = 'previous6Days' | 'lastDay' | 'sameDay' | 'nextDay' | 'next6Days' | 'other';\ntype RelativeDateReturn = { relativeDateCase: RelativeDateCase; date: Date } | null;\n\nexport function formatRelative(props: DateFormatRelativeParams): RelativeDateReturn {\n  const { date, relativeTo } = props;\n  if (!date || !relativeTo) {\n    return null;\n  }\n  const a = normalizeDate(date);\n  const b = normalizeDate(relativeTo);\n  const differenceInDays = differenceInCalendarDays(b, a, { absolute: false });\n\n  if (differenceInDays < -6) {\n    return { relativeDateCase: 'other', date: a };\n  }\n  if (differenceInDays < -1) {\n    return { relativeDateCase: 'previous6Days', date: a };\n  }\n  if (differenceInDays === -1) {\n    return { relativeDateCase: 'lastDay', date: a };\n  }\n  if (differenceInDays === 0) {\n    return { relativeDateCase: 'sameDay', date: a };\n  }\n  if (differenceInDays === 1) {\n    return { relativeDateCase: 'nextDay', date: a };\n  }\n  if (differenceInDays < 7) {\n    return { relativeDateCase: 'next6Days', date: a };\n  }\n  return { relativeDateCase: 'other', date: a };\n}\n\nexport function addYears(initialDate: Date | number | string, yearsToAdd: number): Date {\n  const date = normalizeDate(initialDate);\n  date.setFullYear(date.getFullYear() + yearsToAdd);\n  return date;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}