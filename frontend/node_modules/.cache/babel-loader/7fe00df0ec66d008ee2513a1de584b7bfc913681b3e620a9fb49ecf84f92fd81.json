{"ast":null,"code":"import \"./chunk-3W5G4CYI.js\";\nimport { MagicLinkErrorCode, EmailLinkErrorCode, isClerkAPIResponseError, isKnownError, isMetamaskError, isMagicLinkError, isEmailLinkError } from \"@clerk/shared/error\";\nvar noFrontendApiError = \"Clerk: You must add the frontendApi prop to your <ClerkProvider>\";\nvar noClerkProviderError = \"Clerk: You must wrap your application in a <ClerkProvider> component.\";\nvar noGuaranteedLoadedError = function noGuaranteedLoadedError(hookName) {\n  return \"Clerk: You're calling \".concat(hookName, \" before there's a guarantee the client has been loaded. Call \").concat(hookName, \" from a child of <SignedIn>, <SignedOut>, or <ClerkLoaded>, or use the withClerk() HOC.\");\n};\nvar noGuaranteedUserError = function noGuaranteedUserError(hookName) {\n  return \"Clerk: You're calling \".concat(hookName, \" before there's a guarantee there's an active user. Call \").concat(hookName, \" from a child of <SignedIn> or use the withUser() HOC.\");\n};\nvar multipleClerkProvidersError = \"Clerk: You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\nvar hocChildrenNotAFunctionError = \"Clerk: Child of WithClerk must be a function.\";\nvar multipleChildrenInButtonComponent = function multipleChildrenInButtonComponent(name) {\n  return \"Clerk: You've passed multiple children components to <\".concat(name, \"/>. You can only pass a single child component or text.\");\n};\nvar invalidStateError = \"Clerk: Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support\";\nvar unsupportedNonBrowserDomainOrProxyUrlFunction = \"Clerk: Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.\";\nvar userProfilePageRenderedError = \"Clerk: <UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar userProfileLinkRenderedError = \"Clerk: <UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar organizationProfilePageRenderedError = \"Clerk: <OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar organizationProfileLinkRenderedError = \"Clerk: <OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar customPagesIgnoredComponent = function customPagesIgnoredComponent(componentName) {\n  return \"Clerk: <\".concat(componentName, \" /> can only accept <\").concat(componentName, \".Page /> and <\").concat(componentName, \".Link /> as its children. Any other provided component will be ignored.\");\n};\nvar customPageWrongProps = function customPageWrongProps(componentName) {\n  return \"Clerk: Missing props. <\".concat(componentName, \".Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.\");\n};\nvar customLinkWrongProps = function customLinkWrongProps(componentName) {\n  return \"Clerk: Missing props. <\".concat(componentName, \".Link /> component requires the following props: url, label and labelIcon.\");\n};\nvar useAuthHasRequiresRoleOrPermission = 'Clerk: Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\nexport { EmailLinkErrorCode, MagicLinkErrorCode, customLinkWrongProps, customPageWrongProps, customPagesIgnoredComponent, hocChildrenNotAFunctionError, invalidStateError, isClerkAPIResponseError, isEmailLinkError, isKnownError, isMagicLinkError, isMetamaskError, multipleChildrenInButtonComponent, multipleClerkProvidersError, noClerkProviderError, noFrontendApiError, noGuaranteedLoadedError, noGuaranteedUserError, organizationProfileLinkRenderedError, organizationProfilePageRenderedError, unsupportedNonBrowserDomainOrProxyUrlFunction, useAuthHasRequiresRoleOrPermission, userProfileLinkRenderedError, userProfilePageRenderedError };","map":{"version":3,"mappings":";AAAA,SACEA,oBACAC,oBACAC,yBACAC,cACAC,iBACAC,kBACAC,wBACK;AAEA,IAAMC,qBAAqB;AAE3B,IAAMC,uBAAuB;AAE7B,IAAMC,0BAA0B,SAA1BA,wBAA2BC;EAAA,uCACbA,QAAQ,0EAAgEA,QAAQ;AAAA;AAEpG,IAAMC,wBAAwB,SAAxBA,sBAAyBD;EAAA,uCACXA,QAAQ,sEAA4DA,QAAQ;AAAA;AAEhG,IAAME,8BACX;AAEK,IAAMC,+BAA+B;AAErC,IAAMC,oCAAoC,SAApCA,kCAAqCC;EAAA,uEACSA,IAAI;AAAA;AAExD,IAAMC,oBACX;AAEK,IAAMC,gDACX;AAEK,IAAMC,+BACX;AACK,IAAMC,+BACX;AAEK,IAAMC,uCACX;AACK,IAAMC,uCACX;AAEK,IAAMC,8BAA8B,SAA9BA,4BAA+BC;EAAA,yBAC/BA,aAAa,kCAAwBA,aAAa,2BAAiBA,aAAa;AAAA;AAEtF,IAAMC,uBAAuB,SAAvBA,qBAAwBD;EAAA,wCACTA,aAAa;AAAA;AAElC,IAAME,uBAAuB,SAAvBA,qBAAwBF;EAAA,wCACTA,aAAa;AAAA;AAElC,IAAMG,qCACX","names":["MagicLinkErrorCode","EmailLinkErrorCode","isClerkAPIResponseError","isKnownError","isMetamaskError","isMagicLinkError","isEmailLinkError","noFrontendApiError","noClerkProviderError","noGuaranteedLoadedError","hookName","noGuaranteedUserError","multipleClerkProvidersError","hocChildrenNotAFunctionError","multipleChildrenInButtonComponent","name","invalidStateError","unsupportedNonBrowserDomainOrProxyUrlFunction","userProfilePageRenderedError","userProfileLinkRenderedError","organizationProfilePageRenderedError","organizationProfileLinkRenderedError","customPagesIgnoredComponent","componentName","customPageWrongProps","customLinkWrongProps","useAuthHasRequiresRoleOrPermission"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\errors.ts"],"sourcesContent":["export {\n  MagicLinkErrorCode,\n  EmailLinkErrorCode,\n  isClerkAPIResponseError,\n  isKnownError,\n  isMetamaskError,\n  isMagicLinkError,\n  isEmailLinkError,\n} from '@clerk/shared/error';\n\nexport const noFrontendApiError = 'Clerk: You must add the frontendApi prop to your <ClerkProvider>';\n\nexport const noClerkProviderError = 'Clerk: You must wrap your application in a <ClerkProvider> component.';\n\nexport const noGuaranteedLoadedError = (hookName: string) =>\n  `Clerk: You're calling ${hookName} before there's a guarantee the client has been loaded. Call ${hookName} from a child of <SignedIn>, <SignedOut>, or <ClerkLoaded>, or use the withClerk() HOC.`;\n\nexport const noGuaranteedUserError = (hookName: string) =>\n  `Clerk: You're calling ${hookName} before there's a guarantee there's an active user. Call ${hookName} from a child of <SignedIn> or use the withUser() HOC.`;\n\nexport const multipleClerkProvidersError =\n  \"Clerk: You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\n\nexport const hocChildrenNotAFunctionError = 'Clerk: Child of WithClerk must be a function.';\n\nexport const multipleChildrenInButtonComponent = (name: string) =>\n  `Clerk: You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;\n\nexport const invalidStateError =\n  'Clerk: Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support';\n\nexport const unsupportedNonBrowserDomainOrProxyUrlFunction =\n  'Clerk: Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.';\n\nexport const userProfilePageRenderedError =\n  'Clerk: <UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\nexport const userProfileLinkRenderedError =\n  'Clerk: <UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\n\nexport const organizationProfilePageRenderedError =\n  'Clerk: <OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\nexport const organizationProfileLinkRenderedError =\n  'Clerk: <OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\n\nexport const customPagesIgnoredComponent = (componentName: string) =>\n  `Clerk: <${componentName} /> can only accept <${componentName}.Page /> and <${componentName}.Link /> as its children. Any other provided component will be ignored.`;\n\nexport const customPageWrongProps = (componentName: string) =>\n  `Clerk: Missing props. <${componentName}.Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.`;\n\nexport const customLinkWrongProps = (componentName: string) =>\n  `Clerk: Missing props. <${componentName}.Link /> component requires the following props: url, label and labelIcon.`;\n\nexport const useAuthHasRequiresRoleOrPermission =\n  'Clerk: Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}