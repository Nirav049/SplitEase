{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { logErrorInDevMode } from \"@clerk/shared\";\nimport React from \"react\";\nimport { OrganizationProfileLink, OrganizationProfilePage, UserProfileLink, UserProfilePage } from \"../components/uiComponents\";\nimport { customLinkWrongProps, customPagesIgnoredComponent, customPageWrongProps } from \"../errors\";\nimport { useCustomElementPortal } from \"./useCustomElementPortal\";\nvar isThatComponent = function isThatComponent(v, component) {\n  return !!v && React.isValidElement(v) && (v === null || v === void 0 ? void 0 : v.type) === component;\n};\nvar useUserProfileCustomPages = function useUserProfileCustomPages(children) {\n  var reorderItemsLabels = [\"account\", \"security\"];\n  return useCustomPages({\n    children: children,\n    reorderItemsLabels: reorderItemsLabels,\n    LinkComponent: UserProfileLink,\n    PageComponent: UserProfilePage,\n    componentName: \"UserProfile\"\n  });\n};\nvar useOrganizationProfileCustomPages = function useOrganizationProfileCustomPages(children) {\n  var reorderItemsLabels = [\"members\", \"settings\"];\n  return useCustomPages({\n    children: children,\n    reorderItemsLabels: reorderItemsLabels,\n    LinkComponent: OrganizationProfileLink,\n    PageComponent: OrganizationProfilePage,\n    componentName: \"OrganizationProfile\"\n  });\n};\nvar useCustomPages = function useCustomPages(_ref) {\n  var children = _ref.children,\n    LinkComponent = _ref.LinkComponent,\n    PageComponent = _ref.PageComponent,\n    reorderItemsLabels = _ref.reorderItemsLabels,\n    componentName = _ref.componentName;\n  var validChildren = [];\n  React.Children.forEach(children, function (child) {\n    if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent)) {\n      if (child) {\n        logErrorInDevMode(customPagesIgnoredComponent(componentName));\n      }\n      return;\n    }\n    var props = child.props;\n    var children2 = props.children,\n      label = props.label,\n      url = props.url,\n      labelIcon = props.labelIcon;\n    if (isThatComponent(child, PageComponent)) {\n      if (isReorderItem(props, reorderItemsLabels)) {\n        validChildren.push({\n          label: label\n        });\n      } else if (isCustomPage(props)) {\n        validChildren.push({\n          label: label,\n          labelIcon: labelIcon,\n          children: children2,\n          url: url\n        });\n      } else {\n        logErrorInDevMode(customPageWrongProps(componentName));\n        return;\n      }\n    }\n    if (isThatComponent(child, LinkComponent)) {\n      if (isExternalLink(props)) {\n        validChildren.push({\n          label: label,\n          labelIcon: labelIcon,\n          url: url\n        });\n      } else {\n        logErrorInDevMode(customLinkWrongProps(componentName));\n        return;\n      }\n    }\n  });\n  var customPageContents = [];\n  var customPageLabelIcons = [];\n  var customLinkLabelIcons = [];\n  validChildren.forEach(function (cp, index) {\n    if (isCustomPage(cp)) {\n      customPageContents.push({\n        component: cp.children,\n        id: index\n      });\n      customPageLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n      return;\n    }\n    if (isExternalLink(cp)) {\n      customLinkLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n    }\n  });\n  var customPageContentsPortals = useCustomElementPortal(customPageContents);\n  var customPageLabelIconsPortals = useCustomElementPortal(customPageLabelIcons);\n  var customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n  var customPages = [];\n  var customPagesPortals = [];\n  validChildren.forEach(function (cp, index) {\n    if (isReorderItem(cp, reorderItemsLabels)) {\n      customPages.push({\n        label: cp.label\n      });\n      return;\n    }\n    if (isCustomPage(cp)) {\n      var _customPageContentsPo = customPageContentsPortals.find(function (p) {\n          return p.id === index;\n        }),\n        contentPortal = _customPageContentsPo.portal,\n        mount = _customPageContentsPo.mount,\n        unmount = _customPageContentsPo.unmount;\n      var _customPageLabelIcons = customPageLabelIconsPortals.find(function (p) {\n          return p.id === index;\n        }),\n        labelPortal = _customPageLabelIcons.portal,\n        mountIcon = _customPageLabelIcons.mount,\n        unmountIcon = _customPageLabelIcons.unmount;\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mount: mount,\n        unmount: unmount,\n        mountIcon: mountIcon,\n        unmountIcon: unmountIcon\n      });\n      customPagesPortals.push(contentPortal);\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n    if (isExternalLink(cp)) {\n      var _customLinkLabelIcons = customLinkLabelIconsPortals.find(function (p) {\n          return p.id === index;\n        }),\n        _labelPortal = _customLinkLabelIcons.portal,\n        _mountIcon = _customLinkLabelIcons.mount,\n        _unmountIcon = _customLinkLabelIcons.unmount;\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mountIcon: _mountIcon,\n        unmountIcon: _unmountIcon\n      });\n      customPagesPortals.push(_labelPortal);\n      return;\n    }\n  });\n  return {\n    customPages: customPages,\n    customPagesPortals: customPagesPortals\n  };\n};\nvar isReorderItem = function isReorderItem(childProps, validItems) {\n  var children = childProps.children,\n    label = childProps.label,\n    url = childProps.url,\n    labelIcon = childProps.labelIcon;\n  return !children && !url && !labelIcon && validItems.some(function (v) {\n    return v === label;\n  });\n};\nvar isCustomPage = function isCustomPage(childProps) {\n  var children = childProps.children,\n    label = childProps.label,\n    url = childProps.url,\n    labelIcon = childProps.labelIcon;\n  return !!children && !!url && !!labelIcon && !!label;\n};\nvar isExternalLink = function isExternalLink(childProps) {\n  var children = childProps.children,\n    label = childProps.label,\n    url = childProps.url,\n    labelIcon = childProps.labelIcon;\n  return !children && !!url && !!labelIcon && !!label;\n};\nexport { useOrganizationProfileCustomPages, useUserProfileCustomPages };","map":{"version":3,"mappings":"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","names":["logErrorInDevMode","React","OrganizationProfileLink","OrganizationProfilePage","UserProfileLink","UserProfilePage","customLinkWrongProps","customPagesIgnoredComponent","customPageWrongProps","useCustomElementPortal","isThatComponent","v","component","isValidElement","type","useUserProfileCustomPages","children","reorderItemsLabels","useCustomPages","LinkComponent","PageComponent","componentName","useOrganizationProfileCustomPages","validChildren","Children","forEach","child","props","label","url","labelIcon","isReorderItem","push","isCustomPage","isExternalLink","customPageContents","customPageLabelIcons","customLinkLabelIcons","cp","index","id","customPageContentsPortals","customPageLabelIconsPortals","customLinkLabelIconsPortals","customPages","customPagesPortals","find","p","contentPortal","portal","mount","unmount","labelPortal","mountIcon","unmountIcon","childProps","validItems","some"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\clerk-react\\src\\utils\\useCustomPages.tsx"],"sourcesContent":["import { logErrorInDevMode } from '@clerk/shared';\nimport type { CustomPage } from '@clerk/types';\nimport type { ReactElement } from 'react';\nimport React from 'react';\n\nimport {\n  OrganizationProfileLink,\n  OrganizationProfilePage,\n  UserProfileLink,\n  UserProfilePage,\n} from '../components/uiComponents';\nimport { customLinkWrongProps, customPagesIgnoredComponent, customPageWrongProps } from '../errors';\nimport type { UserProfilePageProps } from '../types';\nimport type { UseCustomElementPortalParams, UseCustomElementPortalReturn } from './useCustomElementPortal';\nimport { useCustomElementPortal } from './useCustomElementPortal';\n\nconst isThatComponent = (v: any, component: React.ReactNode): v is React.ReactNode => {\n  return !!v && React.isValidElement(v) && (v as React.ReactElement)?.type === component;\n};\n\nexport const useUserProfileCustomPages = (children: React.ReactNode | React.ReactNode[]) => {\n  const reorderItemsLabels = ['account', 'security'];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: UserProfileLink,\n    PageComponent: UserProfilePage,\n    componentName: 'UserProfile',\n  });\n};\n\nexport const useOrganizationProfileCustomPages = (children: React.ReactNode | React.ReactNode[]) => {\n  const reorderItemsLabels = ['members', 'settings'];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: OrganizationProfileLink,\n    PageComponent: OrganizationProfilePage,\n    componentName: 'OrganizationProfile',\n  });\n};\n\ntype UseCustomPagesParams = {\n  children: React.ReactNode | React.ReactNode[];\n  LinkComponent: any;\n  PageComponent: any;\n  reorderItemsLabels: string[];\n  componentName: string;\n};\n\ntype CustomPageWithIdType = UserProfilePageProps & { children?: React.ReactNode };\n\nconst useCustomPages = ({\n  children,\n  LinkComponent,\n  PageComponent,\n  reorderItemsLabels,\n  componentName,\n}: UseCustomPagesParams) => {\n  const validChildren: CustomPageWithIdType[] = [];\n\n  React.Children.forEach(children, child => {\n    if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent)) {\n      if (child) {\n        logErrorInDevMode(customPagesIgnoredComponent(componentName));\n      }\n      return;\n    }\n\n    const { props } = child as ReactElement;\n\n    const { children, label, url, labelIcon } = props;\n\n    if (isThatComponent(child, PageComponent)) {\n      if (isReorderItem(props, reorderItemsLabels)) {\n        // This is a reordering item\n        validChildren.push({ label });\n      } else if (isCustomPage(props)) {\n        // this is a custom page\n        validChildren.push({ label, labelIcon, children, url });\n      } else {\n        logErrorInDevMode(customPageWrongProps(componentName));\n        return;\n      }\n    }\n\n    if (isThatComponent(child, LinkComponent)) {\n      if (isExternalLink(props)) {\n        // This is an external link\n        validChildren.push({ label, labelIcon, url });\n      } else {\n        logErrorInDevMode(customLinkWrongProps(componentName));\n        return;\n      }\n    }\n  });\n\n  const customPageContents: UseCustomElementPortalParams[] = [];\n  const customPageLabelIcons: UseCustomElementPortalParams[] = [];\n  const customLinkLabelIcons: UseCustomElementPortalParams[] = [];\n\n  validChildren.forEach((cp, index) => {\n    if (isCustomPage(cp)) {\n      customPageContents.push({ component: cp.children, id: index });\n      customPageLabelIcons.push({ component: cp.labelIcon, id: index });\n      return;\n    }\n    if (isExternalLink(cp)) {\n      customLinkLabelIcons.push({ component: cp.labelIcon, id: index });\n    }\n  });\n\n  const customPageContentsPortals = useCustomElementPortal(customPageContents);\n  const customPageLabelIconsPortals = useCustomElementPortal(customPageLabelIcons);\n  const customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n\n  const customPages: CustomPage[] = [];\n  const customPagesPortals: React.ComponentType[] = [];\n\n  validChildren.forEach((cp, index) => {\n    if (isReorderItem(cp, reorderItemsLabels)) {\n      customPages.push({ label: cp.label });\n      return;\n    }\n    if (isCustomPage(cp)) {\n      const {\n        portal: contentPortal,\n        mount,\n        unmount,\n      } = customPageContentsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon,\n      } = customPageLabelIconsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      customPages.push({ label: cp.label, url: cp.url, mount, unmount, mountIcon, unmountIcon });\n      customPagesPortals.push(contentPortal);\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n    if (isExternalLink(cp)) {\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon,\n      } = customLinkLabelIconsPortals.find(p => p.id === index) as UseCustomElementPortalReturn;\n      customPages.push({ label: cp.label, url: cp.url, mountIcon, unmountIcon });\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n  });\n\n  return { customPages, customPagesPortals };\n};\n\nconst isReorderItem = (childProps: any, validItems: string[]): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !children && !url && !labelIcon && validItems.some(v => v === label);\n};\n\nconst isCustomPage = (childProps: any): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !!children && !!url && !!labelIcon && !!label;\n};\n\nconst isExternalLink = (childProps: any): boolean => {\n  const { children, label, url, labelIcon } = childProps;\n  return !children && !!url && !!labelIcon && !!label;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}