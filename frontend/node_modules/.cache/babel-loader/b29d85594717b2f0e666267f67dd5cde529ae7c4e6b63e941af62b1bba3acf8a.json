{"ast":null,"code":"import { isomorphicAtob } from \"./chunk-TETGTEI2.mjs\";\n\n// src/keys.ts\nvar PUBLISHABLE_KEY_LIVE_PREFIX = \"pk_live_\";\nvar PUBLISHABLE_KEY_TEST_PREFIX = \"pk_test_\";\nvar PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\nfunction buildPublishableKey(frontendApi) {\n  var keyPrefix = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return \"\".concat(keyPrefix).concat(btoa(\"\".concat(frontendApi, \"$\")));\n}\nfunction parsePublishableKey(key) {\n  key = key || \"\";\n  if (!isPublishableKey(key)) {\n    return null;\n  }\n  var instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? \"production\" : \"development\";\n  var frontendApi = isomorphicAtob(key.split(\"_\")[2]);\n  if (!frontendApi.endsWith(\"$\")) {\n    return null;\n  }\n  frontendApi = frontendApi.slice(0, -1);\n  return {\n    instanceType: instanceType,\n    frontendApi: frontendApi\n  };\n}\nfunction isPublishableKey(key) {\n  key = key || \"\";\n  var hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n  var hasValidFrontendApiPostfix = isomorphicAtob(key.split(\"_\")[2] || \"\").endsWith(\"$\");\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\nfunction isLegacyFrontendApiKey(key) {\n  key = key || \"\";\n  return key.startsWith(\"clerk.\");\n}\nfunction createDevOrStagingUrlCache() {\n  var DEV_OR_STAGING_SUFFIXES = [\".lcl.dev\", \".stg.dev\", \".lclstage.dev\", \".stgstage.dev\", \".dev.lclclerk.com\", \".stg.lclclerk.com\", \".accounts.lclclerk.com\", \"accountsstage.dev\", \"accounts.dev\"];\n  var devOrStagingUrlCache = /* @__PURE__ */new Map();\n  return {\n    isDevOrStagingUrl: function isDevOrStagingUrl(url) {\n      if (!url) {\n        return false;\n      }\n      var hostname = typeof url === \"string\" ? url : url.hostname;\n      var res = devOrStagingUrlCache.get(hostname);\n      if (res === void 0) {\n        res = DEV_OR_STAGING_SUFFIXES.some(function (s) {\n          return hostname.endsWith(s);\n        });\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    }\n  };\n}\nfunction isDevelopmentFromApiKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\nfunction isProductionFromApiKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"sk_live_\");\n}\nexport { buildPublishableKey, parsePublishableKey, isPublishableKey, isLegacyFrontendApiKey, createDevOrStagingUrlCache, isDevelopmentFromApiKey, isProductionFromApiKey };","map":{"version":3,"mappings":";;;AAIA,IAAMA,8BAA8B;AACpC,IAAMC,8BAA8B;AAGpC,IAAMC,qCAAqC;AAEpC,SAASC,oBAAoBC,aAA6B;EAC/D,IAAMC,YAAYH,mCAAmCI,KAAKF,WAAW,IACjEH,8BACAD;EACJ,iBAAUK,SAAS,SAAGE,eAAQH,WAAW,MAAG,CAAC;AAC/C;AAEO,SAASI,oBAAoBC,KAAgD;EAClFA,MAAMA,OAAO;EAEb,IAAI,CAACC,iBAAiBD,GAAG,GAAG;IAC1B,OAAO;EACT;EAEA,IAAME,eAAeF,IAAIG,WAAWZ,2BAA2B,IAAI,eAAe;EAElF,IAAII,cAAcS,eAAeJ,IAAIK,MAAM,GAAG,EAAE,CAAC,CAAC;EAElD,IAAI,CAACV,YAAYW,SAAS,GAAG,GAAG;IAC9B,OAAO;EACT;EAEAX,cAAcA,YAAYY,MAAM,GAAG,EAAE;EAErC,OAAO;IACLL;IACAP;EACF;AACF;AAEO,SAASM,iBAAiBD,KAAa;EAC5CA,MAAMA,OAAO;EAEb,IAAMQ,iBAAiBR,IAAIG,WAAWZ,2BAA2B,KAAKS,IAAIG,WAAWX,2BAA2B;EAEhH,IAAMiB,6BAA6BL,eAAeJ,IAAIK,MAAM,GAAG,EAAE,CAAC,KAAK,EAAE,EAAEC,SAAS,GAAG;EAEvF,OAAOE,kBAAkBC;AAC3B;AAEO,SAASC,uBAAuBV,KAAa;EAClDA,MAAMA,OAAO;EAEb,OAAOA,IAAIG,WAAW,QAAQ;AAChC;AAEO,SAASQ,6BAA6B;EAE3C,IAAMC,0BAA0B,CAC9B,YACA,YACA,iBACA,iBACA,qBACA,qBACA,0BACA,qBACA,eACF;EAEA,IAAMC,uBAAuB,mBAAIC,IAAqB;EAEtD,OAAO;IACLC,mBAAmB,2BAACC,KAA+B;MACjD,IAAI,CAACA,KAAK;QACR,OAAO;MACT;MAEA,IAAMC,WAAW,OAAOD,QAAQ,WAAWA,MAAMA,IAAIC;MACrD,IAAIC,MAAML,qBAAqBM,IAAIF,QAAQ;MAC3C,IAAIC,QAAQ,QAAW;QACrBA,MAAMN,wBAAwBQ,KAAK;UAAA,OAAKH,SAASX,SAASe,CAAC,CAAC;QAAA;QAC5DR,qBAAqBS,IAAIL,UAAUC,GAAG;MACxC;MACA,OAAOA;IACT;EACF;AACF;AAEO,SAASK,wBAAwBC,QAAyB;EAC/D,OAAOA,OAAOrB,WAAW,OAAO,KAAKqB,OAAOrB,WAAW,UAAU;AACnE;AAEO,SAASsB,uBAAuBD,QAAyB;EAC9D,OAAOA,OAAOrB,WAAW,OAAO,KAAKqB,OAAOrB,WAAW,UAAU;AACnE","names":["PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","PUBLISHABLE_FRONTEND_API_DEV_REGEX","buildPublishableKey","frontendApi","keyPrefix","test","btoa","parsePublishableKey","key","isPublishableKey","instanceType","startsWith","isomorphicAtob","split","endsWith","slice","hasValidPrefix","hasValidFrontendApiPostfix","isLegacyFrontendApiKey","createDevOrStagingUrlCache","DEV_OR_STAGING_SUFFIXES","devOrStagingUrlCache","Map","isDevOrStagingUrl","url","hostname","res","get","some","s","set","isDevelopmentFromApiKey","apiKey","isProductionFromApiKey"],"sources":["D:\\split project\\expense-tracker_fullstack-master\\frontend\\node_modules\\@clerk\\shared\\src\\keys.ts"],"sourcesContent":["import type { PublishableKey } from '@clerk/types';\n\nimport { isomorphicAtob } from './isomorphicAtob';\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const keyPrefix = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi)\n    ? PUBLISHABLE_KEY_TEST_PREFIX\n    : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${btoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(key: string | undefined): PublishableKey | null {\n  key = key || '';\n\n  if (!isPublishableKey(key)) {\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  if (!frontendApi.endsWith('$')) {\n    return null;\n  }\n\n  frontendApi = frontendApi.slice(0, -1);\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\nexport function isPublishableKey(key: string) {\n  key = key || '';\n\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\n\nexport function isLegacyFrontendApiKey(key: string) {\n  key = key || '';\n\n  return key.startsWith('clerk.');\n}\n\nexport function createDevOrStagingUrlCache() {\n  // TODO: Check if we can merge it with `./instance.ts#isStaging()`\n  const DEV_OR_STAGING_SUFFIXES = [\n    '.lcl.dev',\n    '.stg.dev',\n    '.lclstage.dev',\n    '.stgstage.dev',\n    '.dev.lclclerk.com',\n    '.stg.lclclerk.com',\n    '.accounts.lclclerk.com',\n    'accountsstage.dev',\n    'accounts.dev',\n  ];\n\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromApiKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromApiKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}